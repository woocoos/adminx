// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/adminx/ent/app"
	"github.com/woocoos/adminx/ent/appmenu"
	"github.com/woocoos/adminx/ent/apppermission"
	"github.com/woocoos/adminx/ent/predicate"
)

// AppPermissionUpdate is the builder for updating AppPermission entities.
type AppPermissionUpdate struct {
	config
	hooks    []Hook
	mutation *AppPermissionMutation
}

// Where appends a list predicates to the AppPermissionUpdate builder.
func (apu *AppPermissionUpdate) Where(ps ...predicate.AppPermission) *AppPermissionUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetUpdatedBy sets the "updated_by" field.
func (apu *AppPermissionUpdate) SetUpdatedBy(i int) *AppPermissionUpdate {
	apu.mutation.ResetUpdatedBy()
	apu.mutation.SetUpdatedBy(i)
	return apu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apu *AppPermissionUpdate) SetNillableUpdatedBy(i *int) *AppPermissionUpdate {
	if i != nil {
		apu.SetUpdatedBy(*i)
	}
	return apu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (apu *AppPermissionUpdate) AddUpdatedBy(i int) *AppPermissionUpdate {
	apu.mutation.AddUpdatedBy(i)
	return apu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (apu *AppPermissionUpdate) ClearUpdatedBy() *AppPermissionUpdate {
	apu.mutation.ClearUpdatedBy()
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *AppPermissionUpdate) SetUpdatedAt(t time.Time) *AppPermissionUpdate {
	apu.mutation.SetUpdatedAt(t)
	return apu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apu *AppPermissionUpdate) ClearUpdatedAt() *AppPermissionUpdate {
	apu.mutation.ClearUpdatedAt()
	return apu
}

// SetAppID sets the "app_id" field.
func (apu *AppPermissionUpdate) SetAppID(i int) *AppPermissionUpdate {
	apu.mutation.SetAppID(i)
	return apu
}

// SetName sets the "name" field.
func (apu *AppPermissionUpdate) SetName(s string) *AppPermissionUpdate {
	apu.mutation.SetName(s)
	return apu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apu *AppPermissionUpdate) SetNillableName(s *string) *AppPermissionUpdate {
	if s != nil {
		apu.SetName(*s)
	}
	return apu
}

// ClearName clears the value of the "name" field.
func (apu *AppPermissionUpdate) ClearName() *AppPermissionUpdate {
	apu.mutation.ClearName()
	return apu
}

// SetComments sets the "comments" field.
func (apu *AppPermissionUpdate) SetComments(s string) *AppPermissionUpdate {
	apu.mutation.SetComments(s)
	return apu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (apu *AppPermissionUpdate) SetNillableComments(s *string) *AppPermissionUpdate {
	if s != nil {
		apu.SetComments(*s)
	}
	return apu
}

// ClearComments clears the value of the "comments" field.
func (apu *AppPermissionUpdate) ClearComments() *AppPermissionUpdate {
	apu.mutation.ClearComments()
	return apu
}

// SetApp sets the "app" edge to the App entity.
func (apu *AppPermissionUpdate) SetApp(a *App) *AppPermissionUpdate {
	return apu.SetAppID(a.ID)
}

// AddMenuIDs adds the "menus" edge to the AppMenu entity by IDs.
func (apu *AppPermissionUpdate) AddMenuIDs(ids ...int) *AppPermissionUpdate {
	apu.mutation.AddMenuIDs(ids...)
	return apu
}

// AddMenus adds the "menus" edges to the AppMenu entity.
func (apu *AppPermissionUpdate) AddMenus(a ...*AppMenu) *AppPermissionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddMenuIDs(ids...)
}

// Mutation returns the AppPermissionMutation object of the builder.
func (apu *AppPermissionUpdate) Mutation() *AppPermissionMutation {
	return apu.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (apu *AppPermissionUpdate) ClearApp() *AppPermissionUpdate {
	apu.mutation.ClearApp()
	return apu
}

// ClearMenus clears all "menus" edges to the AppMenu entity.
func (apu *AppPermissionUpdate) ClearMenus() *AppPermissionUpdate {
	apu.mutation.ClearMenus()
	return apu
}

// RemoveMenuIDs removes the "menus" edge to AppMenu entities by IDs.
func (apu *AppPermissionUpdate) RemoveMenuIDs(ids ...int) *AppPermissionUpdate {
	apu.mutation.RemoveMenuIDs(ids...)
	return apu
}

// RemoveMenus removes "menus" edges to AppMenu entities.
func (apu *AppPermissionUpdate) RemoveMenus(a ...*AppMenu) *AppPermissionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveMenuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AppPermissionUpdate) Save(ctx context.Context) (int, error) {
	if err := apu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, AppPermissionMutation](ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AppPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AppPermissionUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AppPermissionUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *AppPermissionUpdate) defaults() error {
	if _, ok := apu.mutation.UpdatedAt(); !ok && !apu.mutation.UpdatedAtCleared() {
		if apppermission.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized apppermission.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := apppermission.UpdateDefaultUpdatedAt()
		apu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (apu *AppPermissionUpdate) check() error {
	if v, ok := apu.mutation.Name(); ok {
		if err := apppermission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AppPermission.name": %w`, err)}
		}
	}
	if _, ok := apu.mutation.AppID(); apu.mutation.AppCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AppPermission.app"`)
	}
	return nil
}

func (apu *AppPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := apu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apppermission.Table, apppermission.Columns, sqlgraph.NewFieldSpec(apppermission.FieldID, field.TypeInt))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.UpdatedBy(); ok {
		_spec.SetField(apppermission.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := apu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(apppermission.FieldUpdatedBy, field.TypeInt, value)
	}
	if apu.mutation.UpdatedByCleared() {
		_spec.ClearField(apppermission.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.SetField(apppermission.FieldUpdatedAt, field.TypeTime, value)
	}
	if apu.mutation.UpdatedAtCleared() {
		_spec.ClearField(apppermission.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.Name(); ok {
		_spec.SetField(apppermission.FieldName, field.TypeString, value)
	}
	if apu.mutation.NameCleared() {
		_spec.ClearField(apppermission.FieldName, field.TypeString)
	}
	if value, ok := apu.mutation.Comments(); ok {
		_spec.SetField(apppermission.FieldComments, field.TypeString, value)
	}
	if apu.mutation.CommentsCleared() {
		_spec.ClearField(apppermission.FieldComments, field.TypeString)
	}
	if apu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apppermission.AppTable,
			Columns: []string{apppermission.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apppermission.AppTable,
			Columns: []string{apppermission.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppermission.MenusTable,
			Columns: []string{apppermission.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedMenusIDs(); len(nodes) > 0 && !apu.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppermission.MenusTable,
			Columns: []string{apppermission.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppermission.MenusTable,
			Columns: []string{apppermission.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// AppPermissionUpdateOne is the builder for updating a single AppPermission entity.
type AppPermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppPermissionMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (apuo *AppPermissionUpdateOne) SetUpdatedBy(i int) *AppPermissionUpdateOne {
	apuo.mutation.ResetUpdatedBy()
	apuo.mutation.SetUpdatedBy(i)
	return apuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apuo *AppPermissionUpdateOne) SetNillableUpdatedBy(i *int) *AppPermissionUpdateOne {
	if i != nil {
		apuo.SetUpdatedBy(*i)
	}
	return apuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (apuo *AppPermissionUpdateOne) AddUpdatedBy(i int) *AppPermissionUpdateOne {
	apuo.mutation.AddUpdatedBy(i)
	return apuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (apuo *AppPermissionUpdateOne) ClearUpdatedBy() *AppPermissionUpdateOne {
	apuo.mutation.ClearUpdatedBy()
	return apuo
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *AppPermissionUpdateOne) SetUpdatedAt(t time.Time) *AppPermissionUpdateOne {
	apuo.mutation.SetUpdatedAt(t)
	return apuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apuo *AppPermissionUpdateOne) ClearUpdatedAt() *AppPermissionUpdateOne {
	apuo.mutation.ClearUpdatedAt()
	return apuo
}

// SetAppID sets the "app_id" field.
func (apuo *AppPermissionUpdateOne) SetAppID(i int) *AppPermissionUpdateOne {
	apuo.mutation.SetAppID(i)
	return apuo
}

// SetName sets the "name" field.
func (apuo *AppPermissionUpdateOne) SetName(s string) *AppPermissionUpdateOne {
	apuo.mutation.SetName(s)
	return apuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apuo *AppPermissionUpdateOne) SetNillableName(s *string) *AppPermissionUpdateOne {
	if s != nil {
		apuo.SetName(*s)
	}
	return apuo
}

// ClearName clears the value of the "name" field.
func (apuo *AppPermissionUpdateOne) ClearName() *AppPermissionUpdateOne {
	apuo.mutation.ClearName()
	return apuo
}

// SetComments sets the "comments" field.
func (apuo *AppPermissionUpdateOne) SetComments(s string) *AppPermissionUpdateOne {
	apuo.mutation.SetComments(s)
	return apuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (apuo *AppPermissionUpdateOne) SetNillableComments(s *string) *AppPermissionUpdateOne {
	if s != nil {
		apuo.SetComments(*s)
	}
	return apuo
}

// ClearComments clears the value of the "comments" field.
func (apuo *AppPermissionUpdateOne) ClearComments() *AppPermissionUpdateOne {
	apuo.mutation.ClearComments()
	return apuo
}

// SetApp sets the "app" edge to the App entity.
func (apuo *AppPermissionUpdateOne) SetApp(a *App) *AppPermissionUpdateOne {
	return apuo.SetAppID(a.ID)
}

// AddMenuIDs adds the "menus" edge to the AppMenu entity by IDs.
func (apuo *AppPermissionUpdateOne) AddMenuIDs(ids ...int) *AppPermissionUpdateOne {
	apuo.mutation.AddMenuIDs(ids...)
	return apuo
}

// AddMenus adds the "menus" edges to the AppMenu entity.
func (apuo *AppPermissionUpdateOne) AddMenus(a ...*AppMenu) *AppPermissionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddMenuIDs(ids...)
}

// Mutation returns the AppPermissionMutation object of the builder.
func (apuo *AppPermissionUpdateOne) Mutation() *AppPermissionMutation {
	return apuo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (apuo *AppPermissionUpdateOne) ClearApp() *AppPermissionUpdateOne {
	apuo.mutation.ClearApp()
	return apuo
}

// ClearMenus clears all "menus" edges to the AppMenu entity.
func (apuo *AppPermissionUpdateOne) ClearMenus() *AppPermissionUpdateOne {
	apuo.mutation.ClearMenus()
	return apuo
}

// RemoveMenuIDs removes the "menus" edge to AppMenu entities by IDs.
func (apuo *AppPermissionUpdateOne) RemoveMenuIDs(ids ...int) *AppPermissionUpdateOne {
	apuo.mutation.RemoveMenuIDs(ids...)
	return apuo
}

// RemoveMenus removes "menus" edges to AppMenu entities.
func (apuo *AppPermissionUpdateOne) RemoveMenus(a ...*AppMenu) *AppPermissionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveMenuIDs(ids...)
}

// Where appends a list predicates to the AppPermissionUpdate builder.
func (apuo *AppPermissionUpdateOne) Where(ps ...predicate.AppPermission) *AppPermissionUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AppPermissionUpdateOne) Select(field string, fields ...string) *AppPermissionUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AppPermission entity.
func (apuo *AppPermissionUpdateOne) Save(ctx context.Context) (*AppPermission, error) {
	if err := apuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*AppPermission, AppPermissionMutation](ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AppPermissionUpdateOne) SaveX(ctx context.Context) *AppPermission {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AppPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AppPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *AppPermissionUpdateOne) defaults() error {
	if _, ok := apuo.mutation.UpdatedAt(); !ok && !apuo.mutation.UpdatedAtCleared() {
		if apppermission.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized apppermission.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := apppermission.UpdateDefaultUpdatedAt()
		apuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (apuo *AppPermissionUpdateOne) check() error {
	if v, ok := apuo.mutation.Name(); ok {
		if err := apppermission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AppPermission.name": %w`, err)}
		}
	}
	if _, ok := apuo.mutation.AppID(); apuo.mutation.AppCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AppPermission.app"`)
	}
	return nil
}

func (apuo *AppPermissionUpdateOne) sqlSave(ctx context.Context) (_node *AppPermission, err error) {
	if err := apuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apppermission.Table, apppermission.Columns, sqlgraph.NewFieldSpec(apppermission.FieldID, field.TypeInt))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppPermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apppermission.FieldID)
		for _, f := range fields {
			if !apppermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apppermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.UpdatedBy(); ok {
		_spec.SetField(apppermission.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := apuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(apppermission.FieldUpdatedBy, field.TypeInt, value)
	}
	if apuo.mutation.UpdatedByCleared() {
		_spec.ClearField(apppermission.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.SetField(apppermission.FieldUpdatedAt, field.TypeTime, value)
	}
	if apuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(apppermission.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.Name(); ok {
		_spec.SetField(apppermission.FieldName, field.TypeString, value)
	}
	if apuo.mutation.NameCleared() {
		_spec.ClearField(apppermission.FieldName, field.TypeString)
	}
	if value, ok := apuo.mutation.Comments(); ok {
		_spec.SetField(apppermission.FieldComments, field.TypeString, value)
	}
	if apuo.mutation.CommentsCleared() {
		_spec.ClearField(apppermission.FieldComments, field.TypeString)
	}
	if apuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apppermission.AppTable,
			Columns: []string{apppermission.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apppermission.AppTable,
			Columns: []string{apppermission.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppermission.MenusTable,
			Columns: []string{apppermission.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedMenusIDs(); len(nodes) > 0 && !apuo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppermission.MenusTable,
			Columns: []string{apppermission.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppermission.MenusTable,
			Columns: []string{apppermission.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppPermission{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
