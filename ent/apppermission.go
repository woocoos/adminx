// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/adminx/ent/app"
	"github.com/woocoos/adminx/ent/apppermission"
)

// AppPermission is the model entity for the AppPermission schema.
type AppPermission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 所属应用
	AppID int `json:"app_id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 读,写,列表
	Kind apppermission.Kind `json:"kind,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppPermissionQuery when eager-loading is set.
	Edges AppPermissionEdges `json:"edges"`
}

// AppPermissionEdges holds the relations/edges for other nodes in the graph.
type AppPermissionEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// 被引用的菜单项
	Menus []*AppMenu `json:"menus,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedMenus map[string][]*AppMenu
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppPermissionEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// MenusOrErr returns the Menus value or an error if the edge
// was not loaded in eager-loading.
func (e AppPermissionEdges) MenusOrErr() ([]*AppMenu, error) {
	if e.loadedTypes[1] {
		return e.Menus, nil
	}
	return nil, &NotLoadedError{edge: "menus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppPermission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apppermission.FieldID, apppermission.FieldCreatedBy, apppermission.FieldUpdatedBy, apppermission.FieldAppID:
			values[i] = new(sql.NullInt64)
		case apppermission.FieldName, apppermission.FieldKind, apppermission.FieldComments:
			values[i] = new(sql.NullString)
		case apppermission.FieldCreatedAt, apppermission.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppPermission", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppPermission fields.
func (ap *AppPermission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apppermission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = int(value.Int64)
		case apppermission.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ap.CreatedBy = int(value.Int64)
			}
		case apppermission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ap.CreatedAt = value.Time
			}
		case apppermission.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ap.UpdatedBy = int(value.Int64)
			}
		case apppermission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ap.UpdatedAt = value.Time
			}
		case apppermission.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				ap.AppID = int(value.Int64)
			}
		case apppermission.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ap.Name = value.String
			}
		case apppermission.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				ap.Kind = apppermission.Kind(value.String)
			}
		case apppermission.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				ap.Comments = value.String
			}
		}
	}
	return nil
}

// QueryApp queries the "app" edge of the AppPermission entity.
func (ap *AppPermission) QueryApp() *AppQuery {
	return NewAppPermissionClient(ap.config).QueryApp(ap)
}

// QueryMenus queries the "menus" edge of the AppPermission entity.
func (ap *AppPermission) QueryMenus() *AppMenuQuery {
	return NewAppPermissionClient(ap.config).QueryMenus(ap)
}

// Update returns a builder for updating this AppPermission.
// Note that you need to call AppPermission.Unwrap() before calling this method if this AppPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AppPermission) Update() *AppPermissionUpdateOne {
	return NewAppPermissionClient(ap.config).UpdateOne(ap)
}

// Unwrap unwraps the AppPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AppPermission) Unwrap() *AppPermission {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppPermission is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AppPermission) String() string {
	var builder strings.Builder
	builder.WriteString("AppPermission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ap.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ap.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ap.AppID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ap.Name)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", ap.Kind))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(ap.Comments)
	builder.WriteByte(')')
	return builder.String()
}

// NamedMenus returns the Menus named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ap *AppPermission) NamedMenus(name string) ([]*AppMenu, error) {
	if ap.Edges.namedMenus == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ap.Edges.namedMenus[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ap *AppPermission) appendNamedMenus(name string, edges ...*AppMenu) {
	if ap.Edges.namedMenus == nil {
		ap.Edges.namedMenus = make(map[string][]*AppMenu)
	}
	if len(edges) == 0 {
		ap.Edges.namedMenus[name] = []*AppMenu{}
	} else {
		ap.Edges.namedMenus[name] = append(ap.Edges.namedMenus[name], edges...)
	}
}

// AppPermissions is a parsable slice of AppPermission.
type AppPermissions []*AppPermission
