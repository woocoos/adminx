// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/adminx/ent/app"
	"github.com/woocoos/adminx/ent/appmenu"
	"github.com/woocoos/adminx/ent/apppermission"
)

// AppPermissionCreate is the builder for creating a AppPermission entity.
type AppPermissionCreate struct {
	config
	mutation *AppPermissionMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (apc *AppPermissionCreate) SetCreatedBy(i int) *AppPermissionCreate {
	apc.mutation.SetCreatedBy(i)
	return apc
}

// SetCreatedAt sets the "created_at" field.
func (apc *AppPermissionCreate) SetCreatedAt(t time.Time) *AppPermissionCreate {
	apc.mutation.SetCreatedAt(t)
	return apc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apc *AppPermissionCreate) SetNillableCreatedAt(t *time.Time) *AppPermissionCreate {
	if t != nil {
		apc.SetCreatedAt(*t)
	}
	return apc
}

// SetUpdatedBy sets the "updated_by" field.
func (apc *AppPermissionCreate) SetUpdatedBy(i int) *AppPermissionCreate {
	apc.mutation.SetUpdatedBy(i)
	return apc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apc *AppPermissionCreate) SetNillableUpdatedBy(i *int) *AppPermissionCreate {
	if i != nil {
		apc.SetUpdatedBy(*i)
	}
	return apc
}

// SetUpdatedAt sets the "updated_at" field.
func (apc *AppPermissionCreate) SetUpdatedAt(t time.Time) *AppPermissionCreate {
	apc.mutation.SetUpdatedAt(t)
	return apc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apc *AppPermissionCreate) SetNillableUpdatedAt(t *time.Time) *AppPermissionCreate {
	if t != nil {
		apc.SetUpdatedAt(*t)
	}
	return apc
}

// SetAppID sets the "app_id" field.
func (apc *AppPermissionCreate) SetAppID(i int) *AppPermissionCreate {
	apc.mutation.SetAppID(i)
	return apc
}

// SetName sets the "name" field.
func (apc *AppPermissionCreate) SetName(s string) *AppPermissionCreate {
	apc.mutation.SetName(s)
	return apc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apc *AppPermissionCreate) SetNillableName(s *string) *AppPermissionCreate {
	if s != nil {
		apc.SetName(*s)
	}
	return apc
}

// SetKind sets the "kind" field.
func (apc *AppPermissionCreate) SetKind(a apppermission.Kind) *AppPermissionCreate {
	apc.mutation.SetKind(a)
	return apc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (apc *AppPermissionCreate) SetNillableKind(a *apppermission.Kind) *AppPermissionCreate {
	if a != nil {
		apc.SetKind(*a)
	}
	return apc
}

// SetComments sets the "comments" field.
func (apc *AppPermissionCreate) SetComments(s string) *AppPermissionCreate {
	apc.mutation.SetComments(s)
	return apc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (apc *AppPermissionCreate) SetNillableComments(s *string) *AppPermissionCreate {
	if s != nil {
		apc.SetComments(*s)
	}
	return apc
}

// SetID sets the "id" field.
func (apc *AppPermissionCreate) SetID(i int) *AppPermissionCreate {
	apc.mutation.SetID(i)
	return apc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (apc *AppPermissionCreate) SetNillableID(i *int) *AppPermissionCreate {
	if i != nil {
		apc.SetID(*i)
	}
	return apc
}

// SetApp sets the "app" edge to the App entity.
func (apc *AppPermissionCreate) SetApp(a *App) *AppPermissionCreate {
	return apc.SetAppID(a.ID)
}

// AddMenuIDs adds the "menus" edge to the AppMenu entity by IDs.
func (apc *AppPermissionCreate) AddMenuIDs(ids ...int) *AppPermissionCreate {
	apc.mutation.AddMenuIDs(ids...)
	return apc
}

// AddMenus adds the "menus" edges to the AppMenu entity.
func (apc *AppPermissionCreate) AddMenus(a ...*AppMenu) *AppPermissionCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apc.AddMenuIDs(ids...)
}

// Mutation returns the AppPermissionMutation object of the builder.
func (apc *AppPermissionCreate) Mutation() *AppPermissionMutation {
	return apc.mutation
}

// Save creates the AppPermission in the database.
func (apc *AppPermissionCreate) Save(ctx context.Context) (*AppPermission, error) {
	if err := apc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*AppPermission, AppPermissionMutation](ctx, apc.sqlSave, apc.mutation, apc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AppPermissionCreate) SaveX(ctx context.Context) *AppPermission {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AppPermissionCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AppPermissionCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *AppPermissionCreate) defaults() error {
	if _, ok := apc.mutation.CreatedAt(); !ok {
		if apppermission.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized apppermission.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := apppermission.DefaultCreatedAt()
		apc.mutation.SetCreatedAt(v)
	}
	if _, ok := apc.mutation.UpdatedAt(); !ok {
		if apppermission.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized apppermission.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := apppermission.DefaultUpdatedAt()
		apc.mutation.SetUpdatedAt(v)
	}
	if _, ok := apc.mutation.ID(); !ok {
		if apppermission.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized apppermission.DefaultID (forgotten import ent/runtime?)")
		}
		v := apppermission.DefaultID()
		apc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (apc *AppPermissionCreate) check() error {
	if _, ok := apc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "AppPermission.created_by"`)}
	}
	if _, ok := apc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppPermission.created_at"`)}
	}
	if _, ok := apc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppPermission.app_id"`)}
	}
	if v, ok := apc.mutation.Name(); ok {
		if err := apppermission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AppPermission.name": %w`, err)}
		}
	}
	if v, ok := apc.mutation.Kind(); ok {
		if err := apppermission.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "AppPermission.kind": %w`, err)}
		}
	}
	if _, ok := apc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New(`ent: missing required edge "AppPermission.app"`)}
	}
	return nil
}

func (apc *AppPermissionCreate) sqlSave(ctx context.Context) (*AppPermission, error) {
	if err := apc.check(); err != nil {
		return nil, err
	}
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	apc.mutation.id = &_node.ID
	apc.mutation.done = true
	return _node, nil
}

func (apc *AppPermissionCreate) createSpec() (*AppPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &AppPermission{config: apc.config}
		_spec = sqlgraph.NewCreateSpec(apppermission.Table, sqlgraph.NewFieldSpec(apppermission.FieldID, field.TypeInt))
	)
	if id, ok := apc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := apc.mutation.CreatedBy(); ok {
		_spec.SetField(apppermission.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := apc.mutation.CreatedAt(); ok {
		_spec.SetField(apppermission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := apc.mutation.UpdatedBy(); ok {
		_spec.SetField(apppermission.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := apc.mutation.UpdatedAt(); ok {
		_spec.SetField(apppermission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := apc.mutation.Name(); ok {
		_spec.SetField(apppermission.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := apc.mutation.Kind(); ok {
		_spec.SetField(apppermission.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := apc.mutation.Comments(); ok {
		_spec.SetField(apppermission.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if nodes := apc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apppermission.AppTable,
			Columns: []string{apppermission.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppermission.MenusTable,
			Columns: []string{apppermission.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppPermissionCreateBulk is the builder for creating many AppPermission entities in bulk.
type AppPermissionCreateBulk struct {
	config
	builders []*AppPermissionCreate
}

// Save creates the AppPermission entities in the database.
func (apcb *AppPermissionCreateBulk) Save(ctx context.Context) ([]*AppPermission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AppPermission, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AppPermissionCreateBulk) SaveX(ctx context.Context) []*AppPermission {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AppPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AppPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}
