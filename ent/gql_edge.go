// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *App) Menus(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *AppMenuOrder, where *AppMenuWhereInput,
) (*AppMenuConnection, error) {
	opts := []AppMenuPaginateOption{
		WithAppMenuOrder(orderBy),
		WithAppMenuFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[0][alias]
	if nodes, err := a.NamedMenus(alias); err == nil || hasTotalCount {
		pager, err := newAppMenuPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &AppMenuConnection{Edges: []*AppMenuEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryMenus().Paginate(ctx, after, first, before, last, opts...)
}

func (a *App) Permissions(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *AppPermissionOrder, where *AppPermissionWhereInput,
) (*AppPermissionConnection, error) {
	opts := []AppPermissionPaginateOption{
		WithAppPermissionOrder(orderBy),
		WithAppPermissionFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[1][alias]
	if nodes, err := a.NamedPermissions(alias); err == nil || hasTotalCount {
		pager, err := newAppPermissionPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &AppPermissionConnection{Edges: []*AppPermissionEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryPermissions().Paginate(ctx, after, first, before, last, opts...)
}

func (am *AppMenu) App(ctx context.Context) (*App, error) {
	result, err := am.Edges.AppOrErr()
	if IsNotLoaded(err) {
		result, err = am.QueryApp().Only(ctx)
	}
	return result, err
}

func (am *AppMenu) Permission(ctx context.Context) (*AppPermission, error) {
	result, err := am.Edges.PermissionOrErr()
	if IsNotLoaded(err) {
		result, err = am.QueryPermission().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ap *AppPermission) App(ctx context.Context) (*App, error) {
	result, err := ap.Edges.AppOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryApp().Only(ctx)
	}
	return result, err
}

func (ap *AppPermission) Menus(ctx context.Context) (result []*AppMenu, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ap.NamedMenus(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ap.Edges.MenusOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ap.QueryMenus().All(ctx)
	}
	return result, err
}

func (o *Organization) Parent(ctx context.Context) (*Organization, error) {
	result, err := o.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryParent().Only(ctx)
	}
	return result, err
}

func (o *Organization) Children(ctx context.Context) (result []*Organization, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryChildren().All(ctx)
	}
	return result, err
}

func (u *User) Identities(ctx context.Context) (result []*UserIdentity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedIdentities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.IdentitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryIdentities().All(ctx)
	}
	return result, err
}

func (u *User) LoginProfile(ctx context.Context) (*UserLoginProfile, error) {
	result, err := u.Edges.LoginProfileOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryLoginProfile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Passwords(ctx context.Context) (result []*UserPassword, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPasswords(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PasswordsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPasswords().All(ctx)
	}
	return result, err
}

func (u *User) Devices(ctx context.Context) (result []*UserDevice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedDevices(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.DevicesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryDevices().All(ctx)
	}
	return result, err
}

func (ud *UserDevice) User(ctx context.Context) (*User, error) {
	result, err := ud.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ud.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ui *UserIdentity) User(ctx context.Context) (*User, error) {
	result, err := ui.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ui.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ulp *UserLoginProfile) User(ctx context.Context) (*User, error) {
	result, err := ulp.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ulp.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (up *UserPassword) User(ctx context.Context) (*User, error) {
	result, err := up.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = up.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}
