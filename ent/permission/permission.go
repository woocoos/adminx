// Code generated by ent, DO NOT EDIT.

package permission

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the permission type in the database.
	Label = "permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// FieldPrincipalKind holds the string denoting the principal_kind field in the database.
	FieldPrincipalKind = "principal_kind"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldOrgPolicyID holds the string denoting the org_policy_id field in the database.
	FieldOrgPolicyID = "org_policy_id"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the permission in the database.
	Table = "permissions"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "permissions"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organization"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "org_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "permissions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for permission fields.
var Columns = []string{
	FieldID,
	FieldOrgID,
	FieldPrincipalKind,
	FieldUserID,
	FieldRoleID,
	FieldOrgPolicyID,
	FieldStartAt,
	FieldEndAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// PrincipalKind defines the type for the "principal_kind" enum field.
type PrincipalKind string

// PrincipalKind values.
const (
	PrincipalKindUser PrincipalKind = "user"
	PrincipalKindRole PrincipalKind = "role"
)

func (pk PrincipalKind) String() string {
	return string(pk)
}

// PrincipalKindValidator is a validator for the "principal_kind" field enum values. It is called by the builders before save.
func PrincipalKindValidator(pk PrincipalKind) error {
	switch pk {
	case PrincipalKindUser, PrincipalKindRole:
		return nil
	default:
		return fmt.Errorf("permission: invalid enum value for principal_kind field: %q", pk)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e PrincipalKind) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *PrincipalKind) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = PrincipalKind(str)
	if err := PrincipalKindValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid PrincipalKind", str)
	}
	return nil
}
