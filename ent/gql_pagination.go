// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
	"github.com/woocoos/adminx/ent/app"
	"github.com/woocoos/adminx/ent/appmenu"
	"github.com/woocoos/adminx/ent/apppermission"
	"github.com/woocoos/adminx/ent/organization"
	"github.com/woocoos/adminx/ent/user"
	"github.com/woocoos/adminx/ent/userdevice"
	"github.com/woocoos/adminx/ent/useridentity"
	"github.com/woocoos/adminx/ent/userloginprofile"
	"github.com/woocoos/adminx/ent/userpassword"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AppEdge is the edge representation of App.
type AppEdge struct {
	Node   *App   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// AppConnection is the connection containing edges to App.
type AppConnection struct {
	Edges      []*AppEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *AppConnection) build(nodes []*App, pager *appPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *App
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *App {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *App {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppPaginateOption enables pagination customization.
type AppPaginateOption func(*appPager) error

// WithAppOrder configures pagination ordering.
func WithAppOrder(order *AppOrder) AppPaginateOption {
	if order == nil {
		order = DefaultAppOrder
	}
	o := *order
	return func(pager *appPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppFilter configures pagination filter.
func WithAppFilter(filter func(*AppQuery) (*AppQuery, error)) AppPaginateOption {
	return func(pager *appPager) error {
		if filter == nil {
			return errors.New("AppQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type appPager struct {
	order  *AppOrder
	filter func(*AppQuery) (*AppQuery, error)
}

func newAppPager(opts []AppPaginateOption) (*appPager, error) {
	pager := &appPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppOrder
	}
	return pager, nil
}

func (p *appPager) applyFilter(query *AppQuery) (*AppQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *appPager) toCursor(a *App) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *appPager) applyCursors(query *AppQuery, after, before *Cursor) *AppQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAppOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *appPager) applyOrder(query *AppQuery, reverse bool) *AppQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAppOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAppOrder.Field.field))
	}
	return query
}

func (p *appPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppOrder.Field {
			b.Comma().Ident(DefaultAppOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to App.
func (a *AppQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppPaginateOption,
) (*AppConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppPager(opts)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AppConnection{Edges: []*AppEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	a = pager.applyCursors(a, after, before)
	a = pager.applyOrder(a, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppOrderFieldCreatedAt orders App by created_at.
	AppOrderFieldCreatedAt = &AppOrderField{
		field: app.FieldCreatedAt,
		toCursor: func(a *App) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppOrderField) String() string {
	var str string
	switch f.field {
	case app.FieldCreatedAt:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AppOrderField", str)
	}
	return nil
}

// AppOrderField defines the ordering field of App.
type AppOrderField struct {
	field    string
	toCursor func(*App) Cursor
}

// AppOrder defines the ordering of App.
type AppOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *AppOrderField `json:"field"`
}

// DefaultAppOrder is the default ordering of App.
var DefaultAppOrder = &AppOrder{
	Direction: OrderDirectionAsc,
	Field: &AppOrderField{
		field: app.FieldID,
		toCursor: func(a *App) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts App into AppEdge.
func (a *App) ToEdge(order *AppOrder) *AppEdge {
	if order == nil {
		order = DefaultAppOrder
	}
	return &AppEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// AppMenuEdge is the edge representation of AppMenu.
type AppMenuEdge struct {
	Node   *AppMenu `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AppMenuConnection is the connection containing edges to AppMenu.
type AppMenuConnection struct {
	Edges      []*AppMenuEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AppMenuConnection) build(nodes []*AppMenu, pager *appmenuPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AppMenu
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppMenu {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppMenu {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppMenuEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppMenuEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppMenuPaginateOption enables pagination customization.
type AppMenuPaginateOption func(*appmenuPager) error

// WithAppMenuOrder configures pagination ordering.
func WithAppMenuOrder(order *AppMenuOrder) AppMenuPaginateOption {
	if order == nil {
		order = DefaultAppMenuOrder
	}
	o := *order
	return func(pager *appmenuPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppMenuOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppMenuFilter configures pagination filter.
func WithAppMenuFilter(filter func(*AppMenuQuery) (*AppMenuQuery, error)) AppMenuPaginateOption {
	return func(pager *appmenuPager) error {
		if filter == nil {
			return errors.New("AppMenuQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type appmenuPager struct {
	order  *AppMenuOrder
	filter func(*AppMenuQuery) (*AppMenuQuery, error)
}

func newAppMenuPager(opts []AppMenuPaginateOption) (*appmenuPager, error) {
	pager := &appmenuPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppMenuOrder
	}
	return pager, nil
}

func (p *appmenuPager) applyFilter(query *AppMenuQuery) (*AppMenuQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *appmenuPager) toCursor(am *AppMenu) Cursor {
	return p.order.Field.toCursor(am)
}

func (p *appmenuPager) applyCursors(query *AppMenuQuery, after, before *Cursor) *AppMenuQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAppMenuOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *appmenuPager) applyOrder(query *AppMenuQuery, reverse bool) *AppMenuQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAppMenuOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAppMenuOrder.Field.field))
	}
	return query
}

func (p *appmenuPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppMenuOrder.Field {
			b.Comma().Ident(DefaultAppMenuOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AppMenu.
func (am *AppMenuQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppMenuPaginateOption,
) (*AppMenuConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppMenuPager(opts)
	if err != nil {
		return nil, err
	}
	if am, err = pager.applyFilter(am); err != nil {
		return nil, err
	}
	conn := &AppMenuConnection{Edges: []*AppMenuEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = am.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	am = pager.applyCursors(am, after, before)
	am = pager.applyOrder(am, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		am.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := am.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := am.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppMenuOrderFieldCreatedAt orders AppMenu by created_at.
	AppMenuOrderFieldCreatedAt = &AppMenuOrderField{
		field: appmenu.FieldCreatedAt,
		toCursor: func(am *AppMenu) Cursor {
			return Cursor{
				ID:    am.ID,
				Value: am.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppMenuOrderField) String() string {
	var str string
	switch f.field {
	case appmenu.FieldCreatedAt:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppMenuOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppMenuOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppMenuOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppMenuOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AppMenuOrderField", str)
	}
	return nil
}

// AppMenuOrderField defines the ordering field of AppMenu.
type AppMenuOrderField struct {
	field    string
	toCursor func(*AppMenu) Cursor
}

// AppMenuOrder defines the ordering of AppMenu.
type AppMenuOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AppMenuOrderField `json:"field"`
}

// DefaultAppMenuOrder is the default ordering of AppMenu.
var DefaultAppMenuOrder = &AppMenuOrder{
	Direction: OrderDirectionAsc,
	Field: &AppMenuOrderField{
		field: appmenu.FieldID,
		toCursor: func(am *AppMenu) Cursor {
			return Cursor{ID: am.ID}
		},
	},
}

// ToEdge converts AppMenu into AppMenuEdge.
func (am *AppMenu) ToEdge(order *AppMenuOrder) *AppMenuEdge {
	if order == nil {
		order = DefaultAppMenuOrder
	}
	return &AppMenuEdge{
		Node:   am,
		Cursor: order.Field.toCursor(am),
	}
}

// AppPermissionEdge is the edge representation of AppPermission.
type AppPermissionEdge struct {
	Node   *AppPermission `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// AppPermissionConnection is the connection containing edges to AppPermission.
type AppPermissionConnection struct {
	Edges      []*AppPermissionEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *AppPermissionConnection) build(nodes []*AppPermission, pager *apppermissionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AppPermission
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppPermission {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppPermission {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppPermissionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppPermissionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppPermissionPaginateOption enables pagination customization.
type AppPermissionPaginateOption func(*apppermissionPager) error

// WithAppPermissionOrder configures pagination ordering.
func WithAppPermissionOrder(order *AppPermissionOrder) AppPermissionPaginateOption {
	if order == nil {
		order = DefaultAppPermissionOrder
	}
	o := *order
	return func(pager *apppermissionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppPermissionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppPermissionFilter configures pagination filter.
func WithAppPermissionFilter(filter func(*AppPermissionQuery) (*AppPermissionQuery, error)) AppPermissionPaginateOption {
	return func(pager *apppermissionPager) error {
		if filter == nil {
			return errors.New("AppPermissionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type apppermissionPager struct {
	order  *AppPermissionOrder
	filter func(*AppPermissionQuery) (*AppPermissionQuery, error)
}

func newAppPermissionPager(opts []AppPermissionPaginateOption) (*apppermissionPager, error) {
	pager := &apppermissionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppPermissionOrder
	}
	return pager, nil
}

func (p *apppermissionPager) applyFilter(query *AppPermissionQuery) (*AppPermissionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *apppermissionPager) toCursor(ap *AppPermission) Cursor {
	return p.order.Field.toCursor(ap)
}

func (p *apppermissionPager) applyCursors(query *AppPermissionQuery, after, before *Cursor) *AppPermissionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAppPermissionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *apppermissionPager) applyOrder(query *AppPermissionQuery, reverse bool) *AppPermissionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAppPermissionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAppPermissionOrder.Field.field))
	}
	return query
}

func (p *apppermissionPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppPermissionOrder.Field {
			b.Comma().Ident(DefaultAppPermissionOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AppPermission.
func (ap *AppPermissionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppPermissionPaginateOption,
) (*AppPermissionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppPermissionPager(opts)
	if err != nil {
		return nil, err
	}
	if ap, err = pager.applyFilter(ap); err != nil {
		return nil, err
	}
	conn := &AppPermissionConnection{Edges: []*AppPermissionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ap.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ap = pager.applyCursors(ap, after, before)
	ap = pager.applyOrder(ap, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ap.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ap.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ap.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppPermissionOrderFieldCreatedAt orders AppPermission by created_at.
	AppPermissionOrderFieldCreatedAt = &AppPermissionOrderField{
		field: apppermission.FieldCreatedAt,
		toCursor: func(ap *AppPermission) Cursor {
			return Cursor{
				ID:    ap.ID,
				Value: ap.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppPermissionOrderField) String() string {
	var str string
	switch f.field {
	case apppermission.FieldCreatedAt:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppPermissionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppPermissionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppPermissionOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppPermissionOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AppPermissionOrderField", str)
	}
	return nil
}

// AppPermissionOrderField defines the ordering field of AppPermission.
type AppPermissionOrderField struct {
	field    string
	toCursor func(*AppPermission) Cursor
}

// AppPermissionOrder defines the ordering of AppPermission.
type AppPermissionOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *AppPermissionOrderField `json:"field"`
}

// DefaultAppPermissionOrder is the default ordering of AppPermission.
var DefaultAppPermissionOrder = &AppPermissionOrder{
	Direction: OrderDirectionAsc,
	Field: &AppPermissionOrderField{
		field: apppermission.FieldID,
		toCursor: func(ap *AppPermission) Cursor {
			return Cursor{ID: ap.ID}
		},
	},
}

// ToEdge converts AppPermission into AppPermissionEdge.
func (ap *AppPermission) ToEdge(order *AppPermissionOrder) *AppPermissionEdge {
	if order == nil {
		order = DefaultAppPermissionOrder
	}
	return &AppPermissionEdge{
		Node:   ap,
		Cursor: order.Field.toCursor(ap),
	}
}

// OrganizationEdge is the edge representation of Organization.
type OrganizationEdge struct {
	Node   *Organization `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// OrganizationConnection is the connection containing edges to Organization.
type OrganizationConnection struct {
	Edges      []*OrganizationEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *OrganizationConnection) build(nodes []*Organization, pager *organizationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Organization
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Organization {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Organization {
			return nodes[i]
		}
	}
	c.Edges = make([]*OrganizationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OrganizationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OrganizationPaginateOption enables pagination customization.
type OrganizationPaginateOption func(*organizationPager) error

// WithOrganizationOrder configures pagination ordering.
func WithOrganizationOrder(order *OrganizationOrder) OrganizationPaginateOption {
	if order == nil {
		order = DefaultOrganizationOrder
	}
	o := *order
	return func(pager *organizationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrganizationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrganizationFilter configures pagination filter.
func WithOrganizationFilter(filter func(*OrganizationQuery) (*OrganizationQuery, error)) OrganizationPaginateOption {
	return func(pager *organizationPager) error {
		if filter == nil {
			return errors.New("OrganizationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type organizationPager struct {
	order  *OrganizationOrder
	filter func(*OrganizationQuery) (*OrganizationQuery, error)
}

func newOrganizationPager(opts []OrganizationPaginateOption) (*organizationPager, error) {
	pager := &organizationPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrganizationOrder
	}
	return pager, nil
}

func (p *organizationPager) applyFilter(query *OrganizationQuery) (*OrganizationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *organizationPager) toCursor(o *Organization) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *organizationPager) applyCursors(query *OrganizationQuery, after, before *Cursor) *OrganizationQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOrganizationOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *organizationPager) applyOrder(query *OrganizationQuery, reverse bool) *OrganizationQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOrganizationOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOrganizationOrder.Field.field))
	}
	return query
}

func (p *organizationPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOrganizationOrder.Field {
			b.Comma().Ident(DefaultOrganizationOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Organization.
func (o *OrganizationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrganizationPaginateOption,
) (*OrganizationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrganizationPager(opts)
	if err != nil {
		return nil, err
	}
	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OrganizationConnection{Edges: []*OrganizationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = o.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	o = pager.applyCursors(o, after, before)
	o = pager.applyOrder(o, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		o.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := o.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// OrganizationOrderFieldCreatedAt orders Organization by created_at.
	OrganizationOrderFieldCreatedAt = &OrganizationOrderField{
		field: organization.FieldCreatedAt,
		toCursor: func(o *Organization) Cursor {
			return Cursor{
				ID:    o.ID,
				Value: o.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OrganizationOrderField) String() string {
	var str string
	switch f.field {
	case organization.FieldCreatedAt:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OrganizationOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OrganizationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OrganizationOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *OrganizationOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid OrganizationOrderField", str)
	}
	return nil
}

// OrganizationOrderField defines the ordering field of Organization.
type OrganizationOrderField struct {
	field    string
	toCursor func(*Organization) Cursor
}

// OrganizationOrder defines the ordering of Organization.
type OrganizationOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *OrganizationOrderField `json:"field"`
}

// DefaultOrganizationOrder is the default ordering of Organization.
var DefaultOrganizationOrder = &OrganizationOrder{
	Direction: OrderDirectionAsc,
	Field: &OrganizationOrderField{
		field: organization.FieldID,
		toCursor: func(o *Organization) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts Organization into OrganizationEdge.
func (o *Organization) ToEdge(order *OrganizationOrder) *OrganizationEdge {
	if order == nil {
		order = DefaultOrganizationOrder
	}
	return &OrganizationEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

func (p *userPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		field: user.FieldCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.field {
	case user.FieldCreatedAt:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// UserDeviceEdge is the edge representation of UserDevice.
type UserDeviceEdge struct {
	Node   *UserDevice `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// UserDeviceConnection is the connection containing edges to UserDevice.
type UserDeviceConnection struct {
	Edges      []*UserDeviceEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *UserDeviceConnection) build(nodes []*UserDevice, pager *userdevicePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserDevice
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserDevice {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserDevice {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserDeviceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserDeviceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserDevicePaginateOption enables pagination customization.
type UserDevicePaginateOption func(*userdevicePager) error

// WithUserDeviceOrder configures pagination ordering.
func WithUserDeviceOrder(order *UserDeviceOrder) UserDevicePaginateOption {
	if order == nil {
		order = DefaultUserDeviceOrder
	}
	o := *order
	return func(pager *userdevicePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserDeviceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserDeviceFilter configures pagination filter.
func WithUserDeviceFilter(filter func(*UserDeviceQuery) (*UserDeviceQuery, error)) UserDevicePaginateOption {
	return func(pager *userdevicePager) error {
		if filter == nil {
			return errors.New("UserDeviceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userdevicePager struct {
	order  *UserDeviceOrder
	filter func(*UserDeviceQuery) (*UserDeviceQuery, error)
}

func newUserDevicePager(opts []UserDevicePaginateOption) (*userdevicePager, error) {
	pager := &userdevicePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserDeviceOrder
	}
	return pager, nil
}

func (p *userdevicePager) applyFilter(query *UserDeviceQuery) (*UserDeviceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userdevicePager) toCursor(ud *UserDevice) Cursor {
	return p.order.Field.toCursor(ud)
}

func (p *userdevicePager) applyCursors(query *UserDeviceQuery, after, before *Cursor) *UserDeviceQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserDeviceOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userdevicePager) applyOrder(query *UserDeviceQuery, reverse bool) *UserDeviceQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserDeviceOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserDeviceOrder.Field.field))
	}
	return query
}

func (p *userdevicePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserDeviceOrder.Field {
			b.Comma().Ident(DefaultUserDeviceOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserDevice.
func (ud *UserDeviceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserDevicePaginateOption,
) (*UserDeviceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserDevicePager(opts)
	if err != nil {
		return nil, err
	}
	if ud, err = pager.applyFilter(ud); err != nil {
		return nil, err
	}
	conn := &UserDeviceConnection{Edges: []*UserDeviceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ud.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ud = pager.applyCursors(ud, after, before)
	ud = pager.applyOrder(ud, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ud.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ud.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ud.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserDeviceOrderFieldCreatedAt orders UserDevice by created_at.
	UserDeviceOrderFieldCreatedAt = &UserDeviceOrderField{
		field: userdevice.FieldCreatedAt,
		toCursor: func(ud *UserDevice) Cursor {
			return Cursor{
				ID:    ud.ID,
				Value: ud.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserDeviceOrderField) String() string {
	var str string
	switch f.field {
	case userdevice.FieldCreatedAt:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserDeviceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserDeviceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserDeviceOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserDeviceOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserDeviceOrderField", str)
	}
	return nil
}

// UserDeviceOrderField defines the ordering field of UserDevice.
type UserDeviceOrderField struct {
	field    string
	toCursor func(*UserDevice) Cursor
}

// UserDeviceOrder defines the ordering of UserDevice.
type UserDeviceOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *UserDeviceOrderField `json:"field"`
}

// DefaultUserDeviceOrder is the default ordering of UserDevice.
var DefaultUserDeviceOrder = &UserDeviceOrder{
	Direction: OrderDirectionAsc,
	Field: &UserDeviceOrderField{
		field: userdevice.FieldID,
		toCursor: func(ud *UserDevice) Cursor {
			return Cursor{ID: ud.ID}
		},
	},
}

// ToEdge converts UserDevice into UserDeviceEdge.
func (ud *UserDevice) ToEdge(order *UserDeviceOrder) *UserDeviceEdge {
	if order == nil {
		order = DefaultUserDeviceOrder
	}
	return &UserDeviceEdge{
		Node:   ud,
		Cursor: order.Field.toCursor(ud),
	}
}

// UserIdentityEdge is the edge representation of UserIdentity.
type UserIdentityEdge struct {
	Node   *UserIdentity `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// UserIdentityConnection is the connection containing edges to UserIdentity.
type UserIdentityConnection struct {
	Edges      []*UserIdentityEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *UserIdentityConnection) build(nodes []*UserIdentity, pager *useridentityPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserIdentity
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserIdentity {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserIdentity {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserIdentityEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserIdentityEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserIdentityPaginateOption enables pagination customization.
type UserIdentityPaginateOption func(*useridentityPager) error

// WithUserIdentityOrder configures pagination ordering.
func WithUserIdentityOrder(order *UserIdentityOrder) UserIdentityPaginateOption {
	if order == nil {
		order = DefaultUserIdentityOrder
	}
	o := *order
	return func(pager *useridentityPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserIdentityOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserIdentityFilter configures pagination filter.
func WithUserIdentityFilter(filter func(*UserIdentityQuery) (*UserIdentityQuery, error)) UserIdentityPaginateOption {
	return func(pager *useridentityPager) error {
		if filter == nil {
			return errors.New("UserIdentityQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type useridentityPager struct {
	order  *UserIdentityOrder
	filter func(*UserIdentityQuery) (*UserIdentityQuery, error)
}

func newUserIdentityPager(opts []UserIdentityPaginateOption) (*useridentityPager, error) {
	pager := &useridentityPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserIdentityOrder
	}
	return pager, nil
}

func (p *useridentityPager) applyFilter(query *UserIdentityQuery) (*UserIdentityQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *useridentityPager) toCursor(ui *UserIdentity) Cursor {
	return p.order.Field.toCursor(ui)
}

func (p *useridentityPager) applyCursors(query *UserIdentityQuery, after, before *Cursor) *UserIdentityQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserIdentityOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *useridentityPager) applyOrder(query *UserIdentityQuery, reverse bool) *UserIdentityQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserIdentityOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserIdentityOrder.Field.field))
	}
	return query
}

func (p *useridentityPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserIdentityOrder.Field {
			b.Comma().Ident(DefaultUserIdentityOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserIdentity.
func (ui *UserIdentityQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserIdentityPaginateOption,
) (*UserIdentityConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserIdentityPager(opts)
	if err != nil {
		return nil, err
	}
	if ui, err = pager.applyFilter(ui); err != nil {
		return nil, err
	}
	conn := &UserIdentityConnection{Edges: []*UserIdentityEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ui.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ui = pager.applyCursors(ui, after, before)
	ui = pager.applyOrder(ui, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ui.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ui.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ui.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserIdentityOrderFieldCreatedAt orders UserIdentity by created_at.
	UserIdentityOrderFieldCreatedAt = &UserIdentityOrderField{
		field: useridentity.FieldCreatedAt,
		toCursor: func(ui *UserIdentity) Cursor {
			return Cursor{
				ID:    ui.ID,
				Value: ui.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserIdentityOrderField) String() string {
	var str string
	switch f.field {
	case useridentity.FieldCreatedAt:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserIdentityOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserIdentityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserIdentityOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserIdentityOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserIdentityOrderField", str)
	}
	return nil
}

// UserIdentityOrderField defines the ordering field of UserIdentity.
type UserIdentityOrderField struct {
	field    string
	toCursor func(*UserIdentity) Cursor
}

// UserIdentityOrder defines the ordering of UserIdentity.
type UserIdentityOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *UserIdentityOrderField `json:"field"`
}

// DefaultUserIdentityOrder is the default ordering of UserIdentity.
var DefaultUserIdentityOrder = &UserIdentityOrder{
	Direction: OrderDirectionAsc,
	Field: &UserIdentityOrderField{
		field: useridentity.FieldID,
		toCursor: func(ui *UserIdentity) Cursor {
			return Cursor{ID: ui.ID}
		},
	},
}

// ToEdge converts UserIdentity into UserIdentityEdge.
func (ui *UserIdentity) ToEdge(order *UserIdentityOrder) *UserIdentityEdge {
	if order == nil {
		order = DefaultUserIdentityOrder
	}
	return &UserIdentityEdge{
		Node:   ui,
		Cursor: order.Field.toCursor(ui),
	}
}

// UserLoginProfileEdge is the edge representation of UserLoginProfile.
type UserLoginProfileEdge struct {
	Node   *UserLoginProfile `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// UserLoginProfileConnection is the connection containing edges to UserLoginProfile.
type UserLoginProfileConnection struct {
	Edges      []*UserLoginProfileEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *UserLoginProfileConnection) build(nodes []*UserLoginProfile, pager *userloginprofilePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserLoginProfile
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserLoginProfile {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserLoginProfile {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserLoginProfileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserLoginProfileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserLoginProfilePaginateOption enables pagination customization.
type UserLoginProfilePaginateOption func(*userloginprofilePager) error

// WithUserLoginProfileOrder configures pagination ordering.
func WithUserLoginProfileOrder(order *UserLoginProfileOrder) UserLoginProfilePaginateOption {
	if order == nil {
		order = DefaultUserLoginProfileOrder
	}
	o := *order
	return func(pager *userloginprofilePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserLoginProfileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserLoginProfileFilter configures pagination filter.
func WithUserLoginProfileFilter(filter func(*UserLoginProfileQuery) (*UserLoginProfileQuery, error)) UserLoginProfilePaginateOption {
	return func(pager *userloginprofilePager) error {
		if filter == nil {
			return errors.New("UserLoginProfileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userloginprofilePager struct {
	order  *UserLoginProfileOrder
	filter func(*UserLoginProfileQuery) (*UserLoginProfileQuery, error)
}

func newUserLoginProfilePager(opts []UserLoginProfilePaginateOption) (*userloginprofilePager, error) {
	pager := &userloginprofilePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserLoginProfileOrder
	}
	return pager, nil
}

func (p *userloginprofilePager) applyFilter(query *UserLoginProfileQuery) (*UserLoginProfileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userloginprofilePager) toCursor(ulp *UserLoginProfile) Cursor {
	return p.order.Field.toCursor(ulp)
}

func (p *userloginprofilePager) applyCursors(query *UserLoginProfileQuery, after, before *Cursor) *UserLoginProfileQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserLoginProfileOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userloginprofilePager) applyOrder(query *UserLoginProfileQuery, reverse bool) *UserLoginProfileQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserLoginProfileOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserLoginProfileOrder.Field.field))
	}
	return query
}

func (p *userloginprofilePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserLoginProfileOrder.Field {
			b.Comma().Ident(DefaultUserLoginProfileOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserLoginProfile.
func (ulp *UserLoginProfileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserLoginProfilePaginateOption,
) (*UserLoginProfileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserLoginProfilePager(opts)
	if err != nil {
		return nil, err
	}
	if ulp, err = pager.applyFilter(ulp); err != nil {
		return nil, err
	}
	conn := &UserLoginProfileConnection{Edges: []*UserLoginProfileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ulp.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ulp = pager.applyCursors(ulp, after, before)
	ulp = pager.applyOrder(ulp, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ulp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ulp.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ulp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserLoginProfileOrderFieldCreatedAt orders UserLoginProfile by created_at.
	UserLoginProfileOrderFieldCreatedAt = &UserLoginProfileOrderField{
		field: userloginprofile.FieldCreatedAt,
		toCursor: func(ulp *UserLoginProfile) Cursor {
			return Cursor{
				ID:    ulp.ID,
				Value: ulp.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserLoginProfileOrderField) String() string {
	var str string
	switch f.field {
	case userloginprofile.FieldCreatedAt:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserLoginProfileOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserLoginProfileOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserLoginProfileOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserLoginProfileOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserLoginProfileOrderField", str)
	}
	return nil
}

// UserLoginProfileOrderField defines the ordering field of UserLoginProfile.
type UserLoginProfileOrderField struct {
	field    string
	toCursor func(*UserLoginProfile) Cursor
}

// UserLoginProfileOrder defines the ordering of UserLoginProfile.
type UserLoginProfileOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *UserLoginProfileOrderField `json:"field"`
}

// DefaultUserLoginProfileOrder is the default ordering of UserLoginProfile.
var DefaultUserLoginProfileOrder = &UserLoginProfileOrder{
	Direction: OrderDirectionAsc,
	Field: &UserLoginProfileOrderField{
		field: userloginprofile.FieldID,
		toCursor: func(ulp *UserLoginProfile) Cursor {
			return Cursor{ID: ulp.ID}
		},
	},
}

// ToEdge converts UserLoginProfile into UserLoginProfileEdge.
func (ulp *UserLoginProfile) ToEdge(order *UserLoginProfileOrder) *UserLoginProfileEdge {
	if order == nil {
		order = DefaultUserLoginProfileOrder
	}
	return &UserLoginProfileEdge{
		Node:   ulp,
		Cursor: order.Field.toCursor(ulp),
	}
}

// UserPasswordEdge is the edge representation of UserPassword.
type UserPasswordEdge struct {
	Node   *UserPassword `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// UserPasswordConnection is the connection containing edges to UserPassword.
type UserPasswordConnection struct {
	Edges      []*UserPasswordEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *UserPasswordConnection) build(nodes []*UserPassword, pager *userpasswordPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserPassword
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserPassword {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserPassword {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserPasswordEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserPasswordEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPasswordPaginateOption enables pagination customization.
type UserPasswordPaginateOption func(*userpasswordPager) error

// WithUserPasswordOrder configures pagination ordering.
func WithUserPasswordOrder(order *UserPasswordOrder) UserPasswordPaginateOption {
	if order == nil {
		order = DefaultUserPasswordOrder
	}
	o := *order
	return func(pager *userpasswordPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserPasswordOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserPasswordFilter configures pagination filter.
func WithUserPasswordFilter(filter func(*UserPasswordQuery) (*UserPasswordQuery, error)) UserPasswordPaginateOption {
	return func(pager *userpasswordPager) error {
		if filter == nil {
			return errors.New("UserPasswordQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userpasswordPager struct {
	order  *UserPasswordOrder
	filter func(*UserPasswordQuery) (*UserPasswordQuery, error)
}

func newUserPasswordPager(opts []UserPasswordPaginateOption) (*userpasswordPager, error) {
	pager := &userpasswordPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserPasswordOrder
	}
	return pager, nil
}

func (p *userpasswordPager) applyFilter(query *UserPasswordQuery) (*UserPasswordQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userpasswordPager) toCursor(up *UserPassword) Cursor {
	return p.order.Field.toCursor(up)
}

func (p *userpasswordPager) applyCursors(query *UserPasswordQuery, after, before *Cursor) *UserPasswordQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserPasswordOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userpasswordPager) applyOrder(query *UserPasswordQuery, reverse bool) *UserPasswordQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserPasswordOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserPasswordOrder.Field.field))
	}
	return query
}

func (p *userpasswordPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserPasswordOrder.Field {
			b.Comma().Ident(DefaultUserPasswordOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserPassword.
func (up *UserPasswordQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPasswordPaginateOption,
) (*UserPasswordConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPasswordPager(opts)
	if err != nil {
		return nil, err
	}
	if up, err = pager.applyFilter(up); err != nil {
		return nil, err
	}
	conn := &UserPasswordConnection{Edges: []*UserPasswordEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = up.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	up = pager.applyCursors(up, after, before)
	up = pager.applyOrder(up, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		up.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := up.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := up.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserPasswordOrderFieldCreatedAt orders UserPassword by created_at.
	UserPasswordOrderFieldCreatedAt = &UserPasswordOrderField{
		field: userpassword.FieldCreatedAt,
		toCursor: func(up *UserPassword) Cursor {
			return Cursor{
				ID:    up.ID,
				Value: up.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserPasswordOrderField) String() string {
	var str string
	switch f.field {
	case userpassword.FieldCreatedAt:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserPasswordOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserPasswordOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserPasswordOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserPasswordOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserPasswordOrderField", str)
	}
	return nil
}

// UserPasswordOrderField defines the ordering field of UserPassword.
type UserPasswordOrderField struct {
	field    string
	toCursor func(*UserPassword) Cursor
}

// UserPasswordOrder defines the ordering of UserPassword.
type UserPasswordOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *UserPasswordOrderField `json:"field"`
}

// DefaultUserPasswordOrder is the default ordering of UserPassword.
var DefaultUserPasswordOrder = &UserPasswordOrder{
	Direction: OrderDirectionAsc,
	Field: &UserPasswordOrderField{
		field: userpassword.FieldID,
		toCursor: func(up *UserPassword) Cursor {
			return Cursor{ID: up.ID}
		},
	},
}

// ToEdge converts UserPassword into UserPasswordEdge.
func (up *UserPassword) ToEdge(order *UserPasswordOrder) *UserPasswordEdge {
	if order == nil {
		order = DefaultUserPasswordOrder
	}
	return &UserPasswordEdge{
		Node:   up,
		Cursor: order.Field.toCursor(up),
	}
}
