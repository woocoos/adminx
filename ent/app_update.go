// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/adminx/ent/app"
	"github.com/woocoos/adminx/ent/appmenu"
	"github.com/woocoos/adminx/ent/apppermission"
	"github.com/woocoos/adminx/ent/predicate"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// Where appends a list predicates to the AppUpdate builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *AppUpdate) SetUpdatedBy(i int) *AppUpdate {
	au.mutation.ResetUpdatedBy()
	au.mutation.SetUpdatedBy(i)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *AppUpdate) SetNillableUpdatedBy(i *int) *AppUpdate {
	if i != nil {
		au.SetUpdatedBy(*i)
	}
	return au
}

// AddUpdatedBy adds i to the "updated_by" field.
func (au *AppUpdate) AddUpdatedBy(i int) *AppUpdate {
	au.mutation.AddUpdatedBy(i)
	return au
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (au *AppUpdate) ClearUpdatedBy() *AppUpdate {
	au.mutation.ClearUpdatedBy()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AppUpdate) SetUpdatedAt(t time.Time) *AppUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AppUpdate) ClearUpdatedAt() *AppUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetName sets the "name" field.
func (au *AppUpdate) SetName(s string) *AppUpdate {
	au.mutation.SetName(s)
	return au
}

// SetCode sets the "code" field.
func (au *AppUpdate) SetCode(s string) *AppUpdate {
	au.mutation.SetCode(s)
	return au
}

// SetKind sets the "kind" field.
func (au *AppUpdate) SetKind(a app.Kind) *AppUpdate {
	au.mutation.SetKind(a)
	return au
}

// SetRedirectURI sets the "redirect_uri" field.
func (au *AppUpdate) SetRedirectURI(s string) *AppUpdate {
	au.mutation.SetRedirectURI(s)
	return au
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (au *AppUpdate) SetNillableRedirectURI(s *string) *AppUpdate {
	if s != nil {
		au.SetRedirectURI(*s)
	}
	return au
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (au *AppUpdate) ClearRedirectURI() *AppUpdate {
	au.mutation.ClearRedirectURI()
	return au
}

// SetAppKey sets the "app_key" field.
func (au *AppUpdate) SetAppKey(s string) *AppUpdate {
	au.mutation.SetAppKey(s)
	return au
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (au *AppUpdate) SetNillableAppKey(s *string) *AppUpdate {
	if s != nil {
		au.SetAppKey(*s)
	}
	return au
}

// ClearAppKey clears the value of the "app_key" field.
func (au *AppUpdate) ClearAppKey() *AppUpdate {
	au.mutation.ClearAppKey()
	return au
}

// SetAppSecret sets the "app_secret" field.
func (au *AppUpdate) SetAppSecret(s string) *AppUpdate {
	au.mutation.SetAppSecret(s)
	return au
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (au *AppUpdate) SetNillableAppSecret(s *string) *AppUpdate {
	if s != nil {
		au.SetAppSecret(*s)
	}
	return au
}

// ClearAppSecret clears the value of the "app_secret" field.
func (au *AppUpdate) ClearAppSecret() *AppUpdate {
	au.mutation.ClearAppSecret()
	return au
}

// SetScopes sets the "scopes" field.
func (au *AppUpdate) SetScopes(s string) *AppUpdate {
	au.mutation.SetScopes(s)
	return au
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (au *AppUpdate) SetNillableScopes(s *string) *AppUpdate {
	if s != nil {
		au.SetScopes(*s)
	}
	return au
}

// ClearScopes clears the value of the "scopes" field.
func (au *AppUpdate) ClearScopes() *AppUpdate {
	au.mutation.ClearScopes()
	return au
}

// SetTokenValidity sets the "token_validity" field.
func (au *AppUpdate) SetTokenValidity(i int32) *AppUpdate {
	au.mutation.ResetTokenValidity()
	au.mutation.SetTokenValidity(i)
	return au
}

// SetNillableTokenValidity sets the "token_validity" field if the given value is not nil.
func (au *AppUpdate) SetNillableTokenValidity(i *int32) *AppUpdate {
	if i != nil {
		au.SetTokenValidity(*i)
	}
	return au
}

// AddTokenValidity adds i to the "token_validity" field.
func (au *AppUpdate) AddTokenValidity(i int32) *AppUpdate {
	au.mutation.AddTokenValidity(i)
	return au
}

// ClearTokenValidity clears the value of the "token_validity" field.
func (au *AppUpdate) ClearTokenValidity() *AppUpdate {
	au.mutation.ClearTokenValidity()
	return au
}

// SetRefreshTokenValidity sets the "refresh_token_validity" field.
func (au *AppUpdate) SetRefreshTokenValidity(i int32) *AppUpdate {
	au.mutation.ResetRefreshTokenValidity()
	au.mutation.SetRefreshTokenValidity(i)
	return au
}

// SetNillableRefreshTokenValidity sets the "refresh_token_validity" field if the given value is not nil.
func (au *AppUpdate) SetNillableRefreshTokenValidity(i *int32) *AppUpdate {
	if i != nil {
		au.SetRefreshTokenValidity(*i)
	}
	return au
}

// AddRefreshTokenValidity adds i to the "refresh_token_validity" field.
func (au *AppUpdate) AddRefreshTokenValidity(i int32) *AppUpdate {
	au.mutation.AddRefreshTokenValidity(i)
	return au
}

// ClearRefreshTokenValidity clears the value of the "refresh_token_validity" field.
func (au *AppUpdate) ClearRefreshTokenValidity() *AppUpdate {
	au.mutation.ClearRefreshTokenValidity()
	return au
}

// SetLogo sets the "logo" field.
func (au *AppUpdate) SetLogo(s string) *AppUpdate {
	au.mutation.SetLogo(s)
	return au
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (au *AppUpdate) SetNillableLogo(s *string) *AppUpdate {
	if s != nil {
		au.SetLogo(*s)
	}
	return au
}

// ClearLogo clears the value of the "logo" field.
func (au *AppUpdate) ClearLogo() *AppUpdate {
	au.mutation.ClearLogo()
	return au
}

// SetComments sets the "comments" field.
func (au *AppUpdate) SetComments(s string) *AppUpdate {
	au.mutation.SetComments(s)
	return au
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (au *AppUpdate) SetNillableComments(s *string) *AppUpdate {
	if s != nil {
		au.SetComments(*s)
	}
	return au
}

// ClearComments clears the value of the "comments" field.
func (au *AppUpdate) ClearComments() *AppUpdate {
	au.mutation.ClearComments()
	return au
}

// SetStatus sets the "status" field.
func (au *AppUpdate) SetStatus(a app.Status) *AppUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AppUpdate) SetNillableStatus(a *app.Status) *AppUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *AppUpdate) ClearStatus() *AppUpdate {
	au.mutation.ClearStatus()
	return au
}

// AddMenuIDs adds the "menus" edge to the AppMenu entity by IDs.
func (au *AppUpdate) AddMenuIDs(ids ...int) *AppUpdate {
	au.mutation.AddMenuIDs(ids...)
	return au
}

// AddMenus adds the "menus" edges to the AppMenu entity.
func (au *AppUpdate) AddMenus(a ...*AppMenu) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddMenuIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the AppPermission entity by IDs.
func (au *AppUpdate) AddPermissionIDs(ids ...int) *AppUpdate {
	au.mutation.AddPermissionIDs(ids...)
	return au
}

// AddPermissions adds the "permissions" edges to the AppPermission entity.
func (au *AppUpdate) AddPermissions(a ...*AppPermission) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddPermissionIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// ClearMenus clears all "menus" edges to the AppMenu entity.
func (au *AppUpdate) ClearMenus() *AppUpdate {
	au.mutation.ClearMenus()
	return au
}

// RemoveMenuIDs removes the "menus" edge to AppMenu entities by IDs.
func (au *AppUpdate) RemoveMenuIDs(ids ...int) *AppUpdate {
	au.mutation.RemoveMenuIDs(ids...)
	return au
}

// RemoveMenus removes "menus" edges to AppMenu entities.
func (au *AppUpdate) RemoveMenus(a ...*AppMenu) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveMenuIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the AppPermission entity.
func (au *AppUpdate) ClearPermissions() *AppUpdate {
	au.mutation.ClearPermissions()
	return au
}

// RemovePermissionIDs removes the "permissions" edge to AppPermission entities by IDs.
func (au *AppUpdate) RemovePermissionIDs(ids ...int) *AppUpdate {
	au.mutation.RemovePermissionIDs(ids...)
	return au
}

// RemovePermissions removes "permissions" edges to AppPermission entities.
func (au *AppUpdate) RemovePermissions(a ...*AppPermission) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemovePermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, AppMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		if app.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized app.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := app.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AppUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := app.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "App.name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Code(); ok {
		if err := app.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "App.code": %w`, err)}
		}
	}
	if v, ok := au.mutation.Kind(); ok {
		if err := app.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "App.kind": %w`, err)}
		}
	}
	if v, ok := au.mutation.RedirectURI(); ok {
		if err := app.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "App.redirect_uri": %w`, err)}
		}
	}
	if v, ok := au.mutation.AppSecret(); ok {
		if err := app.AppSecretValidator(v); err != nil {
			return &ValidationError{Name: "app_secret", err: fmt.Errorf(`ent: validator failed for field "App.app_secret": %w`, err)}
		}
	}
	if v, ok := au.mutation.Scopes(); ok {
		if err := app.ScopesValidator(v); err != nil {
			return &ValidationError{Name: "scopes", err: fmt.Errorf(`ent: validator failed for field "App.scopes": %w`, err)}
		}
	}
	if v, ok := au.mutation.Status(); ok {
		if err := app.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "App.status": %w`, err)}
		}
	}
	return nil
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedBy(); ok {
		_spec.SetField(app.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(app.FieldUpdatedBy, field.TypeInt, value)
	}
	if au.mutation.UpdatedByCleared() {
		_spec.ClearField(app.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(app.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Code(); ok {
		_spec.SetField(app.FieldCode, field.TypeString, value)
	}
	if value, ok := au.mutation.Kind(); ok {
		_spec.SetField(app.FieldKind, field.TypeEnum, value)
	}
	if value, ok := au.mutation.RedirectURI(); ok {
		_spec.SetField(app.FieldRedirectURI, field.TypeString, value)
	}
	if au.mutation.RedirectURICleared() {
		_spec.ClearField(app.FieldRedirectURI, field.TypeString)
	}
	if value, ok := au.mutation.AppKey(); ok {
		_spec.SetField(app.FieldAppKey, field.TypeString, value)
	}
	if au.mutation.AppKeyCleared() {
		_spec.ClearField(app.FieldAppKey, field.TypeString)
	}
	if value, ok := au.mutation.AppSecret(); ok {
		_spec.SetField(app.FieldAppSecret, field.TypeString, value)
	}
	if au.mutation.AppSecretCleared() {
		_spec.ClearField(app.FieldAppSecret, field.TypeString)
	}
	if value, ok := au.mutation.Scopes(); ok {
		_spec.SetField(app.FieldScopes, field.TypeString, value)
	}
	if au.mutation.ScopesCleared() {
		_spec.ClearField(app.FieldScopes, field.TypeString)
	}
	if value, ok := au.mutation.TokenValidity(); ok {
		_spec.SetField(app.FieldTokenValidity, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedTokenValidity(); ok {
		_spec.AddField(app.FieldTokenValidity, field.TypeInt32, value)
	}
	if au.mutation.TokenValidityCleared() {
		_spec.ClearField(app.FieldTokenValidity, field.TypeInt32)
	}
	if value, ok := au.mutation.RefreshTokenValidity(); ok {
		_spec.SetField(app.FieldRefreshTokenValidity, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedRefreshTokenValidity(); ok {
		_spec.AddField(app.FieldRefreshTokenValidity, field.TypeInt32, value)
	}
	if au.mutation.RefreshTokenValidityCleared() {
		_spec.ClearField(app.FieldRefreshTokenValidity, field.TypeInt32)
	}
	if value, ok := au.mutation.Logo(); ok {
		_spec.SetField(app.FieldLogo, field.TypeString, value)
	}
	if au.mutation.LogoCleared() {
		_spec.ClearField(app.FieldLogo, field.TypeString)
	}
	if value, ok := au.mutation.Comments(); ok {
		_spec.SetField(app.FieldComments, field.TypeString, value)
	}
	if au.mutation.CommentsCleared() {
		_spec.ClearField(app.FieldComments, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(app.FieldStatus, field.TypeEnum, value)
	}
	if au.mutation.StatusCleared() {
		_spec.ClearField(app.FieldStatus, field.TypeEnum)
	}
	if au.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMenusIDs(); len(nodes) > 0 && !au.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PermissionsTable,
			Columns: []string{app.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: apppermission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !au.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PermissionsTable,
			Columns: []string{app.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: apppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PermissionsTable,
			Columns: []string{app.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: apppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *AppUpdateOne) SetUpdatedBy(i int) *AppUpdateOne {
	auo.mutation.ResetUpdatedBy()
	auo.mutation.SetUpdatedBy(i)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableUpdatedBy(i *int) *AppUpdateOne {
	if i != nil {
		auo.SetUpdatedBy(*i)
	}
	return auo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (auo *AppUpdateOne) AddUpdatedBy(i int) *AppUpdateOne {
	auo.mutation.AddUpdatedBy(i)
	return auo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (auo *AppUpdateOne) ClearUpdatedBy() *AppUpdateOne {
	auo.mutation.ClearUpdatedBy()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AppUpdateOne) SetUpdatedAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AppUpdateOne) ClearUpdatedAt() *AppUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetName sets the "name" field.
func (auo *AppUpdateOne) SetName(s string) *AppUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetCode sets the "code" field.
func (auo *AppUpdateOne) SetCode(s string) *AppUpdateOne {
	auo.mutation.SetCode(s)
	return auo
}

// SetKind sets the "kind" field.
func (auo *AppUpdateOne) SetKind(a app.Kind) *AppUpdateOne {
	auo.mutation.SetKind(a)
	return auo
}

// SetRedirectURI sets the "redirect_uri" field.
func (auo *AppUpdateOne) SetRedirectURI(s string) *AppUpdateOne {
	auo.mutation.SetRedirectURI(s)
	return auo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableRedirectURI(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetRedirectURI(*s)
	}
	return auo
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (auo *AppUpdateOne) ClearRedirectURI() *AppUpdateOne {
	auo.mutation.ClearRedirectURI()
	return auo
}

// SetAppKey sets the "app_key" field.
func (auo *AppUpdateOne) SetAppKey(s string) *AppUpdateOne {
	auo.mutation.SetAppKey(s)
	return auo
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableAppKey(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetAppKey(*s)
	}
	return auo
}

// ClearAppKey clears the value of the "app_key" field.
func (auo *AppUpdateOne) ClearAppKey() *AppUpdateOne {
	auo.mutation.ClearAppKey()
	return auo
}

// SetAppSecret sets the "app_secret" field.
func (auo *AppUpdateOne) SetAppSecret(s string) *AppUpdateOne {
	auo.mutation.SetAppSecret(s)
	return auo
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableAppSecret(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetAppSecret(*s)
	}
	return auo
}

// ClearAppSecret clears the value of the "app_secret" field.
func (auo *AppUpdateOne) ClearAppSecret() *AppUpdateOne {
	auo.mutation.ClearAppSecret()
	return auo
}

// SetScopes sets the "scopes" field.
func (auo *AppUpdateOne) SetScopes(s string) *AppUpdateOne {
	auo.mutation.SetScopes(s)
	return auo
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableScopes(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetScopes(*s)
	}
	return auo
}

// ClearScopes clears the value of the "scopes" field.
func (auo *AppUpdateOne) ClearScopes() *AppUpdateOne {
	auo.mutation.ClearScopes()
	return auo
}

// SetTokenValidity sets the "token_validity" field.
func (auo *AppUpdateOne) SetTokenValidity(i int32) *AppUpdateOne {
	auo.mutation.ResetTokenValidity()
	auo.mutation.SetTokenValidity(i)
	return auo
}

// SetNillableTokenValidity sets the "token_validity" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableTokenValidity(i *int32) *AppUpdateOne {
	if i != nil {
		auo.SetTokenValidity(*i)
	}
	return auo
}

// AddTokenValidity adds i to the "token_validity" field.
func (auo *AppUpdateOne) AddTokenValidity(i int32) *AppUpdateOne {
	auo.mutation.AddTokenValidity(i)
	return auo
}

// ClearTokenValidity clears the value of the "token_validity" field.
func (auo *AppUpdateOne) ClearTokenValidity() *AppUpdateOne {
	auo.mutation.ClearTokenValidity()
	return auo
}

// SetRefreshTokenValidity sets the "refresh_token_validity" field.
func (auo *AppUpdateOne) SetRefreshTokenValidity(i int32) *AppUpdateOne {
	auo.mutation.ResetRefreshTokenValidity()
	auo.mutation.SetRefreshTokenValidity(i)
	return auo
}

// SetNillableRefreshTokenValidity sets the "refresh_token_validity" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableRefreshTokenValidity(i *int32) *AppUpdateOne {
	if i != nil {
		auo.SetRefreshTokenValidity(*i)
	}
	return auo
}

// AddRefreshTokenValidity adds i to the "refresh_token_validity" field.
func (auo *AppUpdateOne) AddRefreshTokenValidity(i int32) *AppUpdateOne {
	auo.mutation.AddRefreshTokenValidity(i)
	return auo
}

// ClearRefreshTokenValidity clears the value of the "refresh_token_validity" field.
func (auo *AppUpdateOne) ClearRefreshTokenValidity() *AppUpdateOne {
	auo.mutation.ClearRefreshTokenValidity()
	return auo
}

// SetLogo sets the "logo" field.
func (auo *AppUpdateOne) SetLogo(s string) *AppUpdateOne {
	auo.mutation.SetLogo(s)
	return auo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableLogo(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetLogo(*s)
	}
	return auo
}

// ClearLogo clears the value of the "logo" field.
func (auo *AppUpdateOne) ClearLogo() *AppUpdateOne {
	auo.mutation.ClearLogo()
	return auo
}

// SetComments sets the "comments" field.
func (auo *AppUpdateOne) SetComments(s string) *AppUpdateOne {
	auo.mutation.SetComments(s)
	return auo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableComments(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetComments(*s)
	}
	return auo
}

// ClearComments clears the value of the "comments" field.
func (auo *AppUpdateOne) ClearComments() *AppUpdateOne {
	auo.mutation.ClearComments()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AppUpdateOne) SetStatus(a app.Status) *AppUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableStatus(a *app.Status) *AppUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *AppUpdateOne) ClearStatus() *AppUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// AddMenuIDs adds the "menus" edge to the AppMenu entity by IDs.
func (auo *AppUpdateOne) AddMenuIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddMenuIDs(ids...)
	return auo
}

// AddMenus adds the "menus" edges to the AppMenu entity.
func (auo *AppUpdateOne) AddMenus(a ...*AppMenu) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddMenuIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the AppPermission entity by IDs.
func (auo *AppUpdateOne) AddPermissionIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddPermissionIDs(ids...)
	return auo
}

// AddPermissions adds the "permissions" edges to the AppPermission entity.
func (auo *AppUpdateOne) AddPermissions(a ...*AppPermission) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddPermissionIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// ClearMenus clears all "menus" edges to the AppMenu entity.
func (auo *AppUpdateOne) ClearMenus() *AppUpdateOne {
	auo.mutation.ClearMenus()
	return auo
}

// RemoveMenuIDs removes the "menus" edge to AppMenu entities by IDs.
func (auo *AppUpdateOne) RemoveMenuIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemoveMenuIDs(ids...)
	return auo
}

// RemoveMenus removes "menus" edges to AppMenu entities.
func (auo *AppUpdateOne) RemoveMenus(a ...*AppMenu) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveMenuIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the AppPermission entity.
func (auo *AppUpdateOne) ClearPermissions() *AppUpdateOne {
	auo.mutation.ClearPermissions()
	return auo
}

// RemovePermissionIDs removes the "permissions" edge to AppPermission entities by IDs.
func (auo *AppUpdateOne) RemovePermissionIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemovePermissionIDs(ids...)
	return auo
}

// RemovePermissions removes "permissions" edges to AppPermission entities.
func (auo *AppUpdateOne) RemovePermissions(a ...*AppPermission) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemovePermissionIDs(ids...)
}

// Where appends a list predicates to the AppUpdate builder.
func (auo *AppUpdateOne) Where(ps ...predicate.App) *AppUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppUpdateOne) Select(field string, fields ...string) *AppUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated App entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*App, AppMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		if app.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized app.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := app.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AppUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := app.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "App.name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Code(); ok {
		if err := app.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "App.code": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Kind(); ok {
		if err := app.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "App.kind": %w`, err)}
		}
	}
	if v, ok := auo.mutation.RedirectURI(); ok {
		if err := app.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "App.redirect_uri": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AppSecret(); ok {
		if err := app.AppSecretValidator(v); err != nil {
			return &ValidationError{Name: "app_secret", err: fmt.Errorf(`ent: validator failed for field "App.app_secret": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Scopes(); ok {
		if err := app.ScopesValidator(v); err != nil {
			return &ValidationError{Name: "scopes", err: fmt.Errorf(`ent: validator failed for field "App.scopes": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Status(); ok {
		if err := app.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "App.status": %w`, err)}
		}
	}
	return nil
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (_node *App, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "App.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, app.FieldID)
		for _, f := range fields {
			if !app.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != app.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedBy(); ok {
		_spec.SetField(app.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(app.FieldUpdatedBy, field.TypeInt, value)
	}
	if auo.mutation.UpdatedByCleared() {
		_spec.ClearField(app.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(app.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Code(); ok {
		_spec.SetField(app.FieldCode, field.TypeString, value)
	}
	if value, ok := auo.mutation.Kind(); ok {
		_spec.SetField(app.FieldKind, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.RedirectURI(); ok {
		_spec.SetField(app.FieldRedirectURI, field.TypeString, value)
	}
	if auo.mutation.RedirectURICleared() {
		_spec.ClearField(app.FieldRedirectURI, field.TypeString)
	}
	if value, ok := auo.mutation.AppKey(); ok {
		_spec.SetField(app.FieldAppKey, field.TypeString, value)
	}
	if auo.mutation.AppKeyCleared() {
		_spec.ClearField(app.FieldAppKey, field.TypeString)
	}
	if value, ok := auo.mutation.AppSecret(); ok {
		_spec.SetField(app.FieldAppSecret, field.TypeString, value)
	}
	if auo.mutation.AppSecretCleared() {
		_spec.ClearField(app.FieldAppSecret, field.TypeString)
	}
	if value, ok := auo.mutation.Scopes(); ok {
		_spec.SetField(app.FieldScopes, field.TypeString, value)
	}
	if auo.mutation.ScopesCleared() {
		_spec.ClearField(app.FieldScopes, field.TypeString)
	}
	if value, ok := auo.mutation.TokenValidity(); ok {
		_spec.SetField(app.FieldTokenValidity, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedTokenValidity(); ok {
		_spec.AddField(app.FieldTokenValidity, field.TypeInt32, value)
	}
	if auo.mutation.TokenValidityCleared() {
		_spec.ClearField(app.FieldTokenValidity, field.TypeInt32)
	}
	if value, ok := auo.mutation.RefreshTokenValidity(); ok {
		_spec.SetField(app.FieldRefreshTokenValidity, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedRefreshTokenValidity(); ok {
		_spec.AddField(app.FieldRefreshTokenValidity, field.TypeInt32, value)
	}
	if auo.mutation.RefreshTokenValidityCleared() {
		_spec.ClearField(app.FieldRefreshTokenValidity, field.TypeInt32)
	}
	if value, ok := auo.mutation.Logo(); ok {
		_spec.SetField(app.FieldLogo, field.TypeString, value)
	}
	if auo.mutation.LogoCleared() {
		_spec.ClearField(app.FieldLogo, field.TypeString)
	}
	if value, ok := auo.mutation.Comments(); ok {
		_spec.SetField(app.FieldComments, field.TypeString, value)
	}
	if auo.mutation.CommentsCleared() {
		_spec.ClearField(app.FieldComments, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(app.FieldStatus, field.TypeEnum, value)
	}
	if auo.mutation.StatusCleared() {
		_spec.ClearField(app.FieldStatus, field.TypeEnum)
	}
	if auo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMenusIDs(); len(nodes) > 0 && !auo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PermissionsTable,
			Columns: []string{app.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: apppermission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !auo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PermissionsTable,
			Columns: []string{app.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: apppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PermissionsTable,
			Columns: []string{app.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: apppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &App{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
