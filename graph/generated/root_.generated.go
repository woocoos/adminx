// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"github.com/woocoos/adminx/ent"
	"github.com/woocoos/adminx/graph/model"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	CreateUserInput() CreateUserInputResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	App struct {
		AppKey               func(childComplexity int) int
		AppSecret            func(childComplexity int) int
		Comments             func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		ID                   func(childComplexity int) int
		Kind                 func(childComplexity int) int
		Logo                 func(childComplexity int) int
		Menus                func(childComplexity int, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.AppMenuOrder) int
		Name                 func(childComplexity int) int
		Permissions          func(childComplexity int, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.AppPermissionOrder) int
		RedirectURI          func(childComplexity int) int
		RefreshTokenValidity func(childComplexity int) int
		Scopes               func(childComplexity int) int
		Status               func(childComplexity int) int
		TokenValidity        func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	AppConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AppEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AppMenu struct {
		App          func(childComplexity int) int
		AppID        func(childComplexity int) int
		Comments     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DisplaySort  func(childComplexity int) int
		ID           func(childComplexity int) int
		Kind         func(childComplexity int) int
		Name         func(childComplexity int) int
		ParentID     func(childComplexity int) int
		Permission   func(childComplexity int) int
		PermissionID func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	AppMenuConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AppMenuEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AppPermission struct {
		App       func(childComplexity int) int
		AppID     func(childComplexity int) int
		Comments  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		ID        func(childComplexity int) int
		Menus     func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
	}

	AppPermissionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AppPermissionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Mutation struct {
		CreateApp                 func(childComplexity int, input ent.CreateAppInput) int
		CreateOrganization        func(childComplexity int, input ent.CreateOrganizationInput) int
		CreateOrganizationAccount func(childComplexity int, input model.CreateOrganizationAccountInput) int
		CreateOrganizationUser    func(childComplexity int, id int, input ent.CreateUserInput) int
		DeleteApp                 func(childComplexity int, id int) int
		DeleteOrganization        func(childComplexity int, id int) int
		EnableDirectory           func(childComplexity int, input model.EnableDirectoryInput) int
		UpdateApp                 func(childComplexity int, id int, input ent.UpdateAppInput) int
		UpdateOrganization        func(childComplexity int, id int, input ent.UpdateOrganizationInput) int
		UpdateUser                func(childComplexity int, id int, input ent.UpdateUserInput) int
	}

	Organization struct {
		Children    func(childComplexity int) int
		Code        func(childComplexity int) int
		CountryCode func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		DisplaySort func(childComplexity int) int
		Domain      func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Parent      func(childComplexity int) int
		ParentID    func(childComplexity int) int
		Path        func(childComplexity int) int
		Profile     func(childComplexity int) int
		Status      func(childComplexity int) int
		Timezone    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	OrganizationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganizationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Query struct {
		Apps          func(childComplexity int, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.AppOrder, where *ent.AppWhereInput) int
		GlobalID      func(childComplexity int, typeArg string, id int) int
		Node          func(childComplexity int, id string) int
		Nodes         func(childComplexity int, ids []string) int
		Organizations func(childComplexity int, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.OrganizationOrder, where *ent.OrganizationWhereInput) int
		Users         func(childComplexity int, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) int
	}

	User struct {
		Comments      func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		CreationType  func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		Devices       func(childComplexity int) int
		DisplayName   func(childComplexity int) int
		ID            func(childComplexity int) int
		Identities    func(childComplexity int) int
		LoginProfile  func(childComplexity int) int
		Passwords     func(childComplexity int) int
		PrincipalName func(childComplexity int) int
		RegisterIP    func(childComplexity int) int
		Status        func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		UserType      func(childComplexity int) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserDevice struct {
		AppVersion    func(childComplexity int) int
		Comments      func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeviceModel   func(childComplexity int) int
		DeviceName    func(childComplexity int) int
		DeviceUID     func(childComplexity int) int
		ID            func(childComplexity int) int
		Status        func(childComplexity int) int
		SystemName    func(childComplexity int) int
		SystemVersion func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		User          func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserIdentity struct {
		Code       func(childComplexity int) int
		CodeExtend func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		ID         func(childComplexity int) int
		Kind       func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UpdatedBy  func(childComplexity int) int
		User       func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	UserLoginProfile struct {
		CanLogin      func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		ID            func(childComplexity int) int
		LastLoginAt   func(childComplexity int) int
		LastLoginIP   func(childComplexity int) int
		MfaEnabled    func(childComplexity int) int
		MfaStatus     func(childComplexity int) int
		PasswordReset func(childComplexity int) int
		SetKind       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		User          func(childComplexity int) int
		UserID        func(childComplexity int) int
		VerifyDevice  func(childComplexity int) int
	}

	UserPassword struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		ID        func(childComplexity int) int
		Memo      func(childComplexity int) int
		Scene     func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
		User      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "App.appKey":
		if e.complexity.App.AppKey == nil {
			break
		}

		return e.complexity.App.AppKey(childComplexity), true

	case "App.appSecret":
		if e.complexity.App.AppSecret == nil {
			break
		}

		return e.complexity.App.AppSecret(childComplexity), true

	case "App.comments":
		if e.complexity.App.Comments == nil {
			break
		}

		return e.complexity.App.Comments(childComplexity), true

	case "App.createdAt":
		if e.complexity.App.CreatedAt == nil {
			break
		}

		return e.complexity.App.CreatedAt(childComplexity), true

	case "App.createdBy":
		if e.complexity.App.CreatedBy == nil {
			break
		}

		return e.complexity.App.CreatedBy(childComplexity), true

	case "App.id":
		if e.complexity.App.ID == nil {
			break
		}

		return e.complexity.App.ID(childComplexity), true

	case "App.kind":
		if e.complexity.App.Kind == nil {
			break
		}

		return e.complexity.App.Kind(childComplexity), true

	case "App.logo":
		if e.complexity.App.Logo == nil {
			break
		}

		return e.complexity.App.Logo(childComplexity), true

	case "App.menus":
		if e.complexity.App.Menus == nil {
			break
		}

		args, err := ec.field_App_menus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.Menus(childComplexity, args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.AppMenuOrder)), true

	case "App.name":
		if e.complexity.App.Name == nil {
			break
		}

		return e.complexity.App.Name(childComplexity), true

	case "App.permissions":
		if e.complexity.App.Permissions == nil {
			break
		}

		args, err := ec.field_App_permissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.Permissions(childComplexity, args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.AppPermissionOrder)), true

	case "App.redirectURI":
		if e.complexity.App.RedirectURI == nil {
			break
		}

		return e.complexity.App.RedirectURI(childComplexity), true

	case "App.refreshTokenValidity":
		if e.complexity.App.RefreshTokenValidity == nil {
			break
		}

		return e.complexity.App.RefreshTokenValidity(childComplexity), true

	case "App.scopes":
		if e.complexity.App.Scopes == nil {
			break
		}

		return e.complexity.App.Scopes(childComplexity), true

	case "App.status":
		if e.complexity.App.Status == nil {
			break
		}

		return e.complexity.App.Status(childComplexity), true

	case "App.tokenValidity":
		if e.complexity.App.TokenValidity == nil {
			break
		}

		return e.complexity.App.TokenValidity(childComplexity), true

	case "App.updatedAt":
		if e.complexity.App.UpdatedAt == nil {
			break
		}

		return e.complexity.App.UpdatedAt(childComplexity), true

	case "App.updatedBy":
		if e.complexity.App.UpdatedBy == nil {
			break
		}

		return e.complexity.App.UpdatedBy(childComplexity), true

	case "AppConnection.edges":
		if e.complexity.AppConnection.Edges == nil {
			break
		}

		return e.complexity.AppConnection.Edges(childComplexity), true

	case "AppConnection.pageInfo":
		if e.complexity.AppConnection.PageInfo == nil {
			break
		}

		return e.complexity.AppConnection.PageInfo(childComplexity), true

	case "AppConnection.totalCount":
		if e.complexity.AppConnection.TotalCount == nil {
			break
		}

		return e.complexity.AppConnection.TotalCount(childComplexity), true

	case "AppEdge.cursor":
		if e.complexity.AppEdge.Cursor == nil {
			break
		}

		return e.complexity.AppEdge.Cursor(childComplexity), true

	case "AppEdge.node":
		if e.complexity.AppEdge.Node == nil {
			break
		}

		return e.complexity.AppEdge.Node(childComplexity), true

	case "AppMenu.app":
		if e.complexity.AppMenu.App == nil {
			break
		}

		return e.complexity.AppMenu.App(childComplexity), true

	case "AppMenu.appID":
		if e.complexity.AppMenu.AppID == nil {
			break
		}

		return e.complexity.AppMenu.AppID(childComplexity), true

	case "AppMenu.comments":
		if e.complexity.AppMenu.Comments == nil {
			break
		}

		return e.complexity.AppMenu.Comments(childComplexity), true

	case "AppMenu.createdAt":
		if e.complexity.AppMenu.CreatedAt == nil {
			break
		}

		return e.complexity.AppMenu.CreatedAt(childComplexity), true

	case "AppMenu.createdBy":
		if e.complexity.AppMenu.CreatedBy == nil {
			break
		}

		return e.complexity.AppMenu.CreatedBy(childComplexity), true

	case "AppMenu.displaySort":
		if e.complexity.AppMenu.DisplaySort == nil {
			break
		}

		return e.complexity.AppMenu.DisplaySort(childComplexity), true

	case "AppMenu.id":
		if e.complexity.AppMenu.ID == nil {
			break
		}

		return e.complexity.AppMenu.ID(childComplexity), true

	case "AppMenu.kind":
		if e.complexity.AppMenu.Kind == nil {
			break
		}

		return e.complexity.AppMenu.Kind(childComplexity), true

	case "AppMenu.name":
		if e.complexity.AppMenu.Name == nil {
			break
		}

		return e.complexity.AppMenu.Name(childComplexity), true

	case "AppMenu.parentID":
		if e.complexity.AppMenu.ParentID == nil {
			break
		}

		return e.complexity.AppMenu.ParentID(childComplexity), true

	case "AppMenu.permission":
		if e.complexity.AppMenu.Permission == nil {
			break
		}

		return e.complexity.AppMenu.Permission(childComplexity), true

	case "AppMenu.permissionID":
		if e.complexity.AppMenu.PermissionID == nil {
			break
		}

		return e.complexity.AppMenu.PermissionID(childComplexity), true

	case "AppMenu.updatedAt":
		if e.complexity.AppMenu.UpdatedAt == nil {
			break
		}

		return e.complexity.AppMenu.UpdatedAt(childComplexity), true

	case "AppMenu.updatedBy":
		if e.complexity.AppMenu.UpdatedBy == nil {
			break
		}

		return e.complexity.AppMenu.UpdatedBy(childComplexity), true

	case "AppMenuConnection.edges":
		if e.complexity.AppMenuConnection.Edges == nil {
			break
		}

		return e.complexity.AppMenuConnection.Edges(childComplexity), true

	case "AppMenuConnection.pageInfo":
		if e.complexity.AppMenuConnection.PageInfo == nil {
			break
		}

		return e.complexity.AppMenuConnection.PageInfo(childComplexity), true

	case "AppMenuConnection.totalCount":
		if e.complexity.AppMenuConnection.TotalCount == nil {
			break
		}

		return e.complexity.AppMenuConnection.TotalCount(childComplexity), true

	case "AppMenuEdge.cursor":
		if e.complexity.AppMenuEdge.Cursor == nil {
			break
		}

		return e.complexity.AppMenuEdge.Cursor(childComplexity), true

	case "AppMenuEdge.node":
		if e.complexity.AppMenuEdge.Node == nil {
			break
		}

		return e.complexity.AppMenuEdge.Node(childComplexity), true

	case "AppPermission.app":
		if e.complexity.AppPermission.App == nil {
			break
		}

		return e.complexity.AppPermission.App(childComplexity), true

	case "AppPermission.appID":
		if e.complexity.AppPermission.AppID == nil {
			break
		}

		return e.complexity.AppPermission.AppID(childComplexity), true

	case "AppPermission.comments":
		if e.complexity.AppPermission.Comments == nil {
			break
		}

		return e.complexity.AppPermission.Comments(childComplexity), true

	case "AppPermission.createdAt":
		if e.complexity.AppPermission.CreatedAt == nil {
			break
		}

		return e.complexity.AppPermission.CreatedAt(childComplexity), true

	case "AppPermission.createdBy":
		if e.complexity.AppPermission.CreatedBy == nil {
			break
		}

		return e.complexity.AppPermission.CreatedBy(childComplexity), true

	case "AppPermission.id":
		if e.complexity.AppPermission.ID == nil {
			break
		}

		return e.complexity.AppPermission.ID(childComplexity), true

	case "AppPermission.menus":
		if e.complexity.AppPermission.Menus == nil {
			break
		}

		return e.complexity.AppPermission.Menus(childComplexity), true

	case "AppPermission.name":
		if e.complexity.AppPermission.Name == nil {
			break
		}

		return e.complexity.AppPermission.Name(childComplexity), true

	case "AppPermission.updatedAt":
		if e.complexity.AppPermission.UpdatedAt == nil {
			break
		}

		return e.complexity.AppPermission.UpdatedAt(childComplexity), true

	case "AppPermission.updatedBy":
		if e.complexity.AppPermission.UpdatedBy == nil {
			break
		}

		return e.complexity.AppPermission.UpdatedBy(childComplexity), true

	case "AppPermissionConnection.edges":
		if e.complexity.AppPermissionConnection.Edges == nil {
			break
		}

		return e.complexity.AppPermissionConnection.Edges(childComplexity), true

	case "AppPermissionConnection.pageInfo":
		if e.complexity.AppPermissionConnection.PageInfo == nil {
			break
		}

		return e.complexity.AppPermissionConnection.PageInfo(childComplexity), true

	case "AppPermissionConnection.totalCount":
		if e.complexity.AppPermissionConnection.TotalCount == nil {
			break
		}

		return e.complexity.AppPermissionConnection.TotalCount(childComplexity), true

	case "AppPermissionEdge.cursor":
		if e.complexity.AppPermissionEdge.Cursor == nil {
			break
		}

		return e.complexity.AppPermissionEdge.Cursor(childComplexity), true

	case "AppPermissionEdge.node":
		if e.complexity.AppPermissionEdge.Node == nil {
			break
		}

		return e.complexity.AppPermissionEdge.Node(childComplexity), true

	case "Mutation.createApp":
		if e.complexity.Mutation.CreateApp == nil {
			break
		}

		args, err := ec.field_Mutation_createApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateApp(childComplexity, args["input"].(ent.CreateAppInput)), true

	case "Mutation.createOrganization":
		if e.complexity.Mutation.CreateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganization(childComplexity, args["input"].(ent.CreateOrganizationInput)), true

	case "Mutation.createOrganizationAccount":
		if e.complexity.Mutation.CreateOrganizationAccount == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationAccount(childComplexity, args["input"].(model.CreateOrganizationAccountInput)), true

	case "Mutation.createOrganizationUser":
		if e.complexity.Mutation.CreateOrganizationUser == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationUser(childComplexity, args["id"].(int), args["input"].(ent.CreateUserInput)), true

	case "Mutation.deleteApp":
		if e.complexity.Mutation.DeleteApp == nil {
			break
		}

		args, err := ec.field_Mutation_deleteApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteApp(childComplexity, args["id"].(int)), true

	case "Mutation.deleteOrganization":
		if e.complexity.Mutation.DeleteOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganization(childComplexity, args["id"].(int)), true

	case "Mutation.enableDirectory":
		if e.complexity.Mutation.EnableDirectory == nil {
			break
		}

		args, err := ec.field_Mutation_enableDirectory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EnableDirectory(childComplexity, args["input"].(model.EnableDirectoryInput)), true

	case "Mutation.updateApp":
		if e.complexity.Mutation.UpdateApp == nil {
			break
		}

		args, err := ec.field_Mutation_updateApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateApp(childComplexity, args["id"].(int), args["input"].(ent.UpdateAppInput)), true

	case "Mutation.updateOrganization":
		if e.complexity.Mutation.UpdateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganization(childComplexity, args["id"].(int), args["input"].(ent.UpdateOrganizationInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(int), args["input"].(ent.UpdateUserInput)), true

	case "Organization.children":
		if e.complexity.Organization.Children == nil {
			break
		}

		return e.complexity.Organization.Children(childComplexity), true

	case "Organization.code":
		if e.complexity.Organization.Code == nil {
			break
		}

		return e.complexity.Organization.Code(childComplexity), true

	case "Organization.countryCode":
		if e.complexity.Organization.CountryCode == nil {
			break
		}

		return e.complexity.Organization.CountryCode(childComplexity), true

	case "Organization.createdAt":
		if e.complexity.Organization.CreatedAt == nil {
			break
		}

		return e.complexity.Organization.CreatedAt(childComplexity), true

	case "Organization.createdBy":
		if e.complexity.Organization.CreatedBy == nil {
			break
		}

		return e.complexity.Organization.CreatedBy(childComplexity), true

	case "Organization.deletedAt":
		if e.complexity.Organization.DeletedAt == nil {
			break
		}

		return e.complexity.Organization.DeletedAt(childComplexity), true

	case "Organization.displaySort":
		if e.complexity.Organization.DisplaySort == nil {
			break
		}

		return e.complexity.Organization.DisplaySort(childComplexity), true

	case "Organization.domain":
		if e.complexity.Organization.Domain == nil {
			break
		}

		return e.complexity.Organization.Domain(childComplexity), true

	case "Organization.id":
		if e.complexity.Organization.ID == nil {
			break
		}

		return e.complexity.Organization.ID(childComplexity), true

	case "Organization.name":
		if e.complexity.Organization.Name == nil {
			break
		}

		return e.complexity.Organization.Name(childComplexity), true

	case "Organization.ownerID":
		if e.complexity.Organization.OwnerID == nil {
			break
		}

		return e.complexity.Organization.OwnerID(childComplexity), true

	case "Organization.parent":
		if e.complexity.Organization.Parent == nil {
			break
		}

		return e.complexity.Organization.Parent(childComplexity), true

	case "Organization.parentID":
		if e.complexity.Organization.ParentID == nil {
			break
		}

		return e.complexity.Organization.ParentID(childComplexity), true

	case "Organization.path":
		if e.complexity.Organization.Path == nil {
			break
		}

		return e.complexity.Organization.Path(childComplexity), true

	case "Organization.profile":
		if e.complexity.Organization.Profile == nil {
			break
		}

		return e.complexity.Organization.Profile(childComplexity), true

	case "Organization.status":
		if e.complexity.Organization.Status == nil {
			break
		}

		return e.complexity.Organization.Status(childComplexity), true

	case "Organization.timezone":
		if e.complexity.Organization.Timezone == nil {
			break
		}

		return e.complexity.Organization.Timezone(childComplexity), true

	case "Organization.updatedAt":
		if e.complexity.Organization.UpdatedAt == nil {
			break
		}

		return e.complexity.Organization.UpdatedAt(childComplexity), true

	case "Organization.updatedBy":
		if e.complexity.Organization.UpdatedBy == nil {
			break
		}

		return e.complexity.Organization.UpdatedBy(childComplexity), true

	case "OrganizationConnection.edges":
		if e.complexity.OrganizationConnection.Edges == nil {
			break
		}

		return e.complexity.OrganizationConnection.Edges(childComplexity), true

	case "OrganizationConnection.pageInfo":
		if e.complexity.OrganizationConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganizationConnection.PageInfo(childComplexity), true

	case "OrganizationConnection.totalCount":
		if e.complexity.OrganizationConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganizationConnection.TotalCount(childComplexity), true

	case "OrganizationEdge.cursor":
		if e.complexity.OrganizationEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationEdge.Cursor(childComplexity), true

	case "OrganizationEdge.node":
		if e.complexity.OrganizationEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Query.apps":
		if e.complexity.Query.Apps == nil {
			break
		}

		args, err := ec.field_Query_apps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Apps(childComplexity, args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.AppOrder), args["where"].(*ent.AppWhereInput)), true

	case "Query.globalID":
		if e.complexity.Query.GlobalID == nil {
			break
		}

		args, err := ec.field_Query_globalID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GlobalID(childComplexity, args["type"].(string), args["id"].(int)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "Query.organizations":
		if e.complexity.Query.Organizations == nil {
			break
		}

		args, err := ec.field_Query_organizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organizations(childComplexity, args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.OrganizationOrder), args["where"].(*ent.OrganizationWhereInput)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.UserOrder), args["where"].(*ent.UserWhereInput)), true

	case "User.comments":
		if e.complexity.User.Comments == nil {
			break
		}

		return e.complexity.User.Comments(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.createdBy":
		if e.complexity.User.CreatedBy == nil {
			break
		}

		return e.complexity.User.CreatedBy(childComplexity), true

	case "User.creationType":
		if e.complexity.User.CreationType == nil {
			break
		}

		return e.complexity.User.CreationType(childComplexity), true

	case "User.deletedAt":
		if e.complexity.User.DeletedAt == nil {
			break
		}

		return e.complexity.User.DeletedAt(childComplexity), true

	case "User.devices":
		if e.complexity.User.Devices == nil {
			break
		}

		return e.complexity.User.Devices(childComplexity), true

	case "User.displayName":
		if e.complexity.User.DisplayName == nil {
			break
		}

		return e.complexity.User.DisplayName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.identities":
		if e.complexity.User.Identities == nil {
			break
		}

		return e.complexity.User.Identities(childComplexity), true

	case "User.loginProfile":
		if e.complexity.User.LoginProfile == nil {
			break
		}

		return e.complexity.User.LoginProfile(childComplexity), true

	case "User.passwords":
		if e.complexity.User.Passwords == nil {
			break
		}

		return e.complexity.User.Passwords(childComplexity), true

	case "User.principalName":
		if e.complexity.User.PrincipalName == nil {
			break
		}

		return e.complexity.User.PrincipalName(childComplexity), true

	case "User.registerIP":
		if e.complexity.User.RegisterIP == nil {
			break
		}

		return e.complexity.User.RegisterIP(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.updatedBy":
		if e.complexity.User.UpdatedBy == nil {
			break
		}

		return e.complexity.User.UpdatedBy(childComplexity), true

	case "User.userType":
		if e.complexity.User.UserType == nil {
			break
		}

		return e.complexity.User.UserType(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserDevice.appVersion":
		if e.complexity.UserDevice.AppVersion == nil {
			break
		}

		return e.complexity.UserDevice.AppVersion(childComplexity), true

	case "UserDevice.comments":
		if e.complexity.UserDevice.Comments == nil {
			break
		}

		return e.complexity.UserDevice.Comments(childComplexity), true

	case "UserDevice.createdAt":
		if e.complexity.UserDevice.CreatedAt == nil {
			break
		}

		return e.complexity.UserDevice.CreatedAt(childComplexity), true

	case "UserDevice.createdBy":
		if e.complexity.UserDevice.CreatedBy == nil {
			break
		}

		return e.complexity.UserDevice.CreatedBy(childComplexity), true

	case "UserDevice.deviceModel":
		if e.complexity.UserDevice.DeviceModel == nil {
			break
		}

		return e.complexity.UserDevice.DeviceModel(childComplexity), true

	case "UserDevice.deviceName":
		if e.complexity.UserDevice.DeviceName == nil {
			break
		}

		return e.complexity.UserDevice.DeviceName(childComplexity), true

	case "UserDevice.deviceUID":
		if e.complexity.UserDevice.DeviceUID == nil {
			break
		}

		return e.complexity.UserDevice.DeviceUID(childComplexity), true

	case "UserDevice.id":
		if e.complexity.UserDevice.ID == nil {
			break
		}

		return e.complexity.UserDevice.ID(childComplexity), true

	case "UserDevice.status":
		if e.complexity.UserDevice.Status == nil {
			break
		}

		return e.complexity.UserDevice.Status(childComplexity), true

	case "UserDevice.systemName":
		if e.complexity.UserDevice.SystemName == nil {
			break
		}

		return e.complexity.UserDevice.SystemName(childComplexity), true

	case "UserDevice.systemVersion":
		if e.complexity.UserDevice.SystemVersion == nil {
			break
		}

		return e.complexity.UserDevice.SystemVersion(childComplexity), true

	case "UserDevice.updatedAt":
		if e.complexity.UserDevice.UpdatedAt == nil {
			break
		}

		return e.complexity.UserDevice.UpdatedAt(childComplexity), true

	case "UserDevice.updatedBy":
		if e.complexity.UserDevice.UpdatedBy == nil {
			break
		}

		return e.complexity.UserDevice.UpdatedBy(childComplexity), true

	case "UserDevice.user":
		if e.complexity.UserDevice.User == nil {
			break
		}

		return e.complexity.UserDevice.User(childComplexity), true

	case "UserDevice.userID":
		if e.complexity.UserDevice.UserID == nil {
			break
		}

		return e.complexity.UserDevice.UserID(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserIdentity.code":
		if e.complexity.UserIdentity.Code == nil {
			break
		}

		return e.complexity.UserIdentity.Code(childComplexity), true

	case "UserIdentity.codeExtend":
		if e.complexity.UserIdentity.CodeExtend == nil {
			break
		}

		return e.complexity.UserIdentity.CodeExtend(childComplexity), true

	case "UserIdentity.createdAt":
		if e.complexity.UserIdentity.CreatedAt == nil {
			break
		}

		return e.complexity.UserIdentity.CreatedAt(childComplexity), true

	case "UserIdentity.createdBy":
		if e.complexity.UserIdentity.CreatedBy == nil {
			break
		}

		return e.complexity.UserIdentity.CreatedBy(childComplexity), true

	case "UserIdentity.id":
		if e.complexity.UserIdentity.ID == nil {
			break
		}

		return e.complexity.UserIdentity.ID(childComplexity), true

	case "UserIdentity.kind":
		if e.complexity.UserIdentity.Kind == nil {
			break
		}

		return e.complexity.UserIdentity.Kind(childComplexity), true

	case "UserIdentity.status":
		if e.complexity.UserIdentity.Status == nil {
			break
		}

		return e.complexity.UserIdentity.Status(childComplexity), true

	case "UserIdentity.updatedAt":
		if e.complexity.UserIdentity.UpdatedAt == nil {
			break
		}

		return e.complexity.UserIdentity.UpdatedAt(childComplexity), true

	case "UserIdentity.updatedBy":
		if e.complexity.UserIdentity.UpdatedBy == nil {
			break
		}

		return e.complexity.UserIdentity.UpdatedBy(childComplexity), true

	case "UserIdentity.user":
		if e.complexity.UserIdentity.User == nil {
			break
		}

		return e.complexity.UserIdentity.User(childComplexity), true

	case "UserIdentity.userID":
		if e.complexity.UserIdentity.UserID == nil {
			break
		}

		return e.complexity.UserIdentity.UserID(childComplexity), true

	case "UserLoginProfile.canLogin":
		if e.complexity.UserLoginProfile.CanLogin == nil {
			break
		}

		return e.complexity.UserLoginProfile.CanLogin(childComplexity), true

	case "UserLoginProfile.createdAt":
		if e.complexity.UserLoginProfile.CreatedAt == nil {
			break
		}

		return e.complexity.UserLoginProfile.CreatedAt(childComplexity), true

	case "UserLoginProfile.createdBy":
		if e.complexity.UserLoginProfile.CreatedBy == nil {
			break
		}

		return e.complexity.UserLoginProfile.CreatedBy(childComplexity), true

	case "UserLoginProfile.id":
		if e.complexity.UserLoginProfile.ID == nil {
			break
		}

		return e.complexity.UserLoginProfile.ID(childComplexity), true

	case "UserLoginProfile.lastLoginAt":
		if e.complexity.UserLoginProfile.LastLoginAt == nil {
			break
		}

		return e.complexity.UserLoginProfile.LastLoginAt(childComplexity), true

	case "UserLoginProfile.lastLoginIP":
		if e.complexity.UserLoginProfile.LastLoginIP == nil {
			break
		}

		return e.complexity.UserLoginProfile.LastLoginIP(childComplexity), true

	case "UserLoginProfile.mfaEnabled":
		if e.complexity.UserLoginProfile.MfaEnabled == nil {
			break
		}

		return e.complexity.UserLoginProfile.MfaEnabled(childComplexity), true

	case "UserLoginProfile.mfaStatus":
		if e.complexity.UserLoginProfile.MfaStatus == nil {
			break
		}

		return e.complexity.UserLoginProfile.MfaStatus(childComplexity), true

	case "UserLoginProfile.passwordReset":
		if e.complexity.UserLoginProfile.PasswordReset == nil {
			break
		}

		return e.complexity.UserLoginProfile.PasswordReset(childComplexity), true

	case "UserLoginProfile.setKind":
		if e.complexity.UserLoginProfile.SetKind == nil {
			break
		}

		return e.complexity.UserLoginProfile.SetKind(childComplexity), true

	case "UserLoginProfile.updatedAt":
		if e.complexity.UserLoginProfile.UpdatedAt == nil {
			break
		}

		return e.complexity.UserLoginProfile.UpdatedAt(childComplexity), true

	case "UserLoginProfile.updatedBy":
		if e.complexity.UserLoginProfile.UpdatedBy == nil {
			break
		}

		return e.complexity.UserLoginProfile.UpdatedBy(childComplexity), true

	case "UserLoginProfile.user":
		if e.complexity.UserLoginProfile.User == nil {
			break
		}

		return e.complexity.UserLoginProfile.User(childComplexity), true

	case "UserLoginProfile.userID":
		if e.complexity.UserLoginProfile.UserID == nil {
			break
		}

		return e.complexity.UserLoginProfile.UserID(childComplexity), true

	case "UserLoginProfile.verifyDevice":
		if e.complexity.UserLoginProfile.VerifyDevice == nil {
			break
		}

		return e.complexity.UserLoginProfile.VerifyDevice(childComplexity), true

	case "UserPassword.createdAt":
		if e.complexity.UserPassword.CreatedAt == nil {
			break
		}

		return e.complexity.UserPassword.CreatedAt(childComplexity), true

	case "UserPassword.createdBy":
		if e.complexity.UserPassword.CreatedBy == nil {
			break
		}

		return e.complexity.UserPassword.CreatedBy(childComplexity), true

	case "UserPassword.id":
		if e.complexity.UserPassword.ID == nil {
			break
		}

		return e.complexity.UserPassword.ID(childComplexity), true

	case "UserPassword.memo":
		if e.complexity.UserPassword.Memo == nil {
			break
		}

		return e.complexity.UserPassword.Memo(childComplexity), true

	case "UserPassword.scene":
		if e.complexity.UserPassword.Scene == nil {
			break
		}

		return e.complexity.UserPassword.Scene(childComplexity), true

	case "UserPassword.status":
		if e.complexity.UserPassword.Status == nil {
			break
		}

		return e.complexity.UserPassword.Status(childComplexity), true

	case "UserPassword.updatedAt":
		if e.complexity.UserPassword.UpdatedAt == nil {
			break
		}

		return e.complexity.UserPassword.UpdatedAt(childComplexity), true

	case "UserPassword.updatedBy":
		if e.complexity.UserPassword.UpdatedBy == nil {
			break
		}

		return e.complexity.UserPassword.UpdatedBy(childComplexity), true

	case "UserPassword.user":
		if e.complexity.UserPassword.User == nil {
			break
		}

		return e.complexity.UserPassword.User(childComplexity), true

	case "UserPassword.userID":
		if e.complexity.UserPassword.UserID == nil {
			break
		}

		return e.complexity.UserPassword.UserID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAppMenuOrder,
		ec.unmarshalInputAppMenuWhereInput,
		ec.unmarshalInputAppOrder,
		ec.unmarshalInputAppPermissionOrder,
		ec.unmarshalInputAppPermissionWhereInput,
		ec.unmarshalInputAppWhereInput,
		ec.unmarshalInputCreateAppInput,
		ec.unmarshalInputCreateOrganizationAccountInput,
		ec.unmarshalInputCreateOrganizationInput,
		ec.unmarshalInputCreateUserIdentityInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateUserLoginProfileInput,
		ec.unmarshalInputCreateUserPasswordInput,
		ec.unmarshalInputEnableDirectoryInput,
		ec.unmarshalInputOrganizationOrder,
		ec.unmarshalInputOrganizationUserOrder,
		ec.unmarshalInputOrganizationUserWhereInput,
		ec.unmarshalInputOrganizationWhereInput,
		ec.unmarshalInputUpdateAppInput,
		ec.unmarshalInputUpdateOrganizationInput,
		ec.unmarshalInputUpdateUserIdentityInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateUserLoginProfileInput,
		ec.unmarshalInputUpdateUserPasswordInput,
		ec.unmarshalInputUserDeviceOrder,
		ec.unmarshalInputUserDeviceWhereInput,
		ec.unmarshalInputUserIdentityOrder,
		ec.unmarshalInputUserIdentityWhereInput,
		ec.unmarshalInputUserLoginProfileOrder,
		ec.unmarshalInputUserLoginProfileWhereInput,
		ec.unmarshalInputUserOrder,
		ec.unmarshalInputUserPasswordOrder,
		ec.unmarshalInputUserPasswordWhereInput,
		ec.unmarshalInputUserWhereInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../doc/ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type App implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """应用名称"""
  name: String
  """应用类型"""
  kind: AppKind!
  """回调地址"""
  redirectURI: String
  """应用ID"""
  appKey: String
  """应用密钥"""
  appSecret: String
  """权限范围"""
  scopes: String
  """token有效期"""
  tokenValidity: Int
  """refresh_token有效期"""
  refreshTokenValidity: Int
  """图标"""
  logo: String
  """备注"""
  comments: String
  """状态"""
  status: AppStatus
  menus(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for AppMenus returned from the connection."""
    orderBy: AppMenuOrder

    """Filtering options for AppMenus returned from the connection."""
    where: AppMenuWhereInput
  ): AppMenuConnection!
  permissions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for AppPermissions returned from the connection."""
    orderBy: AppPermissionOrder

    """Filtering options for AppPermissions returned from the connection."""
    where: AppPermissionWhereInput
  ): AppPermissionConnection!
}
"""A connection to a list of items."""
type AppConnection {
  """A list of edges."""
  edges: [AppEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AppEdge {
  """The item at the end of the edge."""
  node: App
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""AppKind is enum for the field kind"""
enum AppKind @goModel(model: "github.com/woocoos/adminx/ent/app.Kind") {
  web
  native
  server
}
type AppMenu implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """所属应用"""
  appID: ID!
  """父级ID"""
  parentID: Int!
  """目录,菜单项"""
  kind: AppMenuKind!
  """菜单名称"""
  name: String
  """权限ID"""
  permissionID: ID
  """备注"""
  comments: String
  displaySort: Int
  app: App!
  permission: AppPermission
}
"""A connection to a list of items."""
type AppMenuConnection {
  """A list of edges."""
  edges: [AppMenuEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AppMenuEdge {
  """The item at the end of the edge."""
  node: AppMenu
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""AppMenuKind is enum for the field kind"""
enum AppMenuKind @goModel(model: "github.com/woocoos/adminx/ent/appmenu.Kind") {
  dir
  menu
}
"""Ordering options for AppMenu connections"""
input AppMenuOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AppMenus."""
  field: AppMenuOrderField!
}
"""Properties by which AppMenu connections can be ordered."""
enum AppMenuOrderField {
  createdAt
}
"""
AppMenuWhereInput is used for filtering AppMenu objects.
Input was generated by ent.
"""
input AppMenuWhereInput {
  not: AppMenuWhereInput
  and: [AppMenuWhereInput!]
  or: [AppMenuWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """app_id field predicates"""
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  """parent_id field predicates"""
  parentID: Int
  parentIDNEQ: Int
  parentIDIn: [Int!]
  parentIDNotIn: [Int!]
  parentIDGT: Int
  parentIDGTE: Int
  parentIDLT: Int
  parentIDLTE: Int
  """kind field predicates"""
  kind: AppMenuKind
  kindNEQ: AppMenuKind
  kindIn: [AppMenuKind!]
  kindNotIn: [AppMenuKind!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """permission_id field predicates"""
  permissionID: ID
  permissionIDNEQ: ID
  permissionIDIn: [ID!]
  permissionIDNotIn: [ID!]
  permissionIDIsNil: Boolean
  permissionIDNotNil: Boolean
  """app edge predicates"""
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
  """permission edge predicates"""
  hasPermission: Boolean
  hasPermissionWith: [AppPermissionWhereInput!]
}
"""Ordering options for App connections"""
input AppOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Apps."""
  field: AppOrderField!
}
"""Properties by which App connections can be ordered."""
enum AppOrderField {
  createdAt
}
type AppPermission implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """所属应用"""
  appID: ID!
  """名称"""
  name: String
  """备注"""
  comments: String
  app: App!
  menus: [AppMenu!]
}
"""A connection to a list of items."""
type AppPermissionConnection {
  """A list of edges."""
  edges: [AppPermissionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AppPermissionEdge {
  """The item at the end of the edge."""
  node: AppPermission
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for AppPermission connections"""
input AppPermissionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AppPermissions."""
  field: AppPermissionOrderField!
}
"""Properties by which AppPermission connections can be ordered."""
enum AppPermissionOrderField {
  createdAt
}
"""
AppPermissionWhereInput is used for filtering AppPermission objects.
Input was generated by ent.
"""
input AppPermissionWhereInput {
  not: AppPermissionWhereInput
  and: [AppPermissionWhereInput!]
  or: [AppPermissionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """app_id field predicates"""
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """app edge predicates"""
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
  """menus edge predicates"""
  hasMenus: Boolean
  hasMenusWith: [AppMenuWhereInput!]
}
"""AppStatus is enum for the field status"""
enum AppStatus @goModel(model: "github.com/woocoos/adminx/ent/app.Status") {
  active
  inactive
}
"""
AppWhereInput is used for filtering App objects.
Input was generated by ent.
"""
input AppWhereInput {
  not: AppWhereInput
  and: [AppWhereInput!]
  or: [AppWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """kind field predicates"""
  kind: AppKind
  kindNEQ: AppKind
  kindIn: [AppKind!]
  kindNotIn: [AppKind!]
  """redirect_uri field predicates"""
  redirectURI: String
  redirectURINEQ: String
  redirectURIIn: [String!]
  redirectURINotIn: [String!]
  redirectURIGT: String
  redirectURIGTE: String
  redirectURILT: String
  redirectURILTE: String
  redirectURIContains: String
  redirectURIHasPrefix: String
  redirectURIHasSuffix: String
  redirectURIIsNil: Boolean
  redirectURINotNil: Boolean
  redirectURIEqualFold: String
  redirectURIContainsFold: String
  """app_key field predicates"""
  appKey: String
  appKeyNEQ: String
  appKeyIn: [String!]
  appKeyNotIn: [String!]
  appKeyGT: String
  appKeyGTE: String
  appKeyLT: String
  appKeyLTE: String
  appKeyContains: String
  appKeyHasPrefix: String
  appKeyHasSuffix: String
  appKeyIsNil: Boolean
  appKeyNotNil: Boolean
  appKeyEqualFold: String
  appKeyContainsFold: String
  """app_secret field predicates"""
  appSecret: String
  appSecretNEQ: String
  appSecretIn: [String!]
  appSecretNotIn: [String!]
  appSecretGT: String
  appSecretGTE: String
  appSecretLT: String
  appSecretLTE: String
  appSecretContains: String
  appSecretHasPrefix: String
  appSecretHasSuffix: String
  appSecretIsNil: Boolean
  appSecretNotNil: Boolean
  appSecretEqualFold: String
  appSecretContainsFold: String
  """scopes field predicates"""
  scopes: String
  scopesNEQ: String
  scopesIn: [String!]
  scopesNotIn: [String!]
  scopesGT: String
  scopesGTE: String
  scopesLT: String
  scopesLTE: String
  scopesContains: String
  scopesHasPrefix: String
  scopesHasSuffix: String
  scopesIsNil: Boolean
  scopesNotNil: Boolean
  scopesEqualFold: String
  scopesContainsFold: String
  """token_validity field predicates"""
  tokenValidity: Int
  tokenValidityNEQ: Int
  tokenValidityIn: [Int!]
  tokenValidityNotIn: [Int!]
  tokenValidityGT: Int
  tokenValidityGTE: Int
  tokenValidityLT: Int
  tokenValidityLTE: Int
  tokenValidityIsNil: Boolean
  tokenValidityNotNil: Boolean
  """refresh_token_validity field predicates"""
  refreshTokenValidity: Int
  refreshTokenValidityNEQ: Int
  refreshTokenValidityIn: [Int!]
  refreshTokenValidityNotIn: [Int!]
  refreshTokenValidityGT: Int
  refreshTokenValidityGTE: Int
  refreshTokenValidityLT: Int
  refreshTokenValidityLTE: Int
  refreshTokenValidityIsNil: Boolean
  refreshTokenValidityNotNil: Boolean
  """logo field predicates"""
  logo: String
  logoNEQ: String
  logoIn: [String!]
  logoNotIn: [String!]
  logoGT: String
  logoGTE: String
  logoLT: String
  logoLTE: String
  logoContains: String
  logoHasPrefix: String
  logoHasSuffix: String
  logoIsNil: Boolean
  logoNotNil: Boolean
  logoEqualFold: String
  logoContainsFold: String
  """comments field predicates"""
  comments: String
  commentsNEQ: String
  commentsIn: [String!]
  commentsNotIn: [String!]
  commentsGT: String
  commentsGTE: String
  commentsLT: String
  commentsLTE: String
  commentsContains: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIsNil: Boolean
  commentsNotNil: Boolean
  commentsEqualFold: String
  commentsContainsFold: String
  """status field predicates"""
  status: AppStatus
  statusNEQ: AppStatus
  statusIn: [AppStatus!]
  statusNotIn: [AppStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """menus edge predicates"""
  hasMenus: Boolean
  hasMenusWith: [AppMenuWhereInput!]
  """permissions edge predicates"""
  hasPermissions: Boolean
  hasPermissionsWith: [AppPermissionWhereInput!]
}
"""
CreateAppInput is used for create App object.
Input was generated by ent.
"""
input CreateAppInput {
  """应用名称"""
  name: String
  """应用类型"""
  kind: AppKind!
  """回调地址"""
  redirectURI: String
  """应用ID"""
  appKey: String
  """应用密钥"""
  appSecret: String
  """权限范围"""
  scopes: String
  """token有效期"""
  tokenValidity: Int
  """refresh_token有效期"""
  refreshTokenValidity: Int
  """图标"""
  logo: String
  """备注"""
  comments: String
  """状态"""
  status: AppStatus
  menuIDs: [ID!]
  permissionIDs: [ID!]
}
"""
CreateOrganizationInput is used for create Organization object.
Input was generated by ent.
"""
input CreateOrganizationInput {
  """默认域名"""
  domain: String
  """组织名称"""
  name: String!
  """简介"""
  profile: String
  """状态"""
  status: OrganizationStatus
  """国家或地区2字码"""
  countryCode: String
  """时区"""
  timezone: String
  parentID: ID!
  ownerID: ID
}
"""
CreateUserIdentityInput is used for create UserIdentity object.
Input was generated by ent.
"""
input CreateUserIdentityInput {
  """身份标识类型 手机、邮箱、用户名、微信、qq"""
  kind: UserIdentityKind!
  """用户名、邮箱、手机、unionid、qq"""
  code: String
  """扩展标识码,比如微信的openID"""
  codeExtend: String
  """状态,部分登陆方式需要验证通过才可启用"""
  status: UserIdentityStatus
  userID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  """登陆名称"""
  principalName: String!
  """显示名"""
  displayName: String!
  """状态"""
  status: UserStatus
  """备注"""
  comments: String
  identityIDs: [ID!]
  loginProfileID: ID
  passwordIDs: [ID!]
  deviceIDs: [ID!]
}
"""
CreateUserLoginProfileInput is used for create UserLoginProfile object.
Input was generated by ent.
"""
input CreateUserLoginProfileInput {
  """是否允许使用密码登陆控制台"""
  canLogin: Boolean
  """设置密码方式"""
  setKind: UserLoginProfileSetKind!
  """下次登陆时需要重置密码"""
  passwordReset: Boolean
  """是否开启设备认证"""
  verifyDevice: Boolean!
  """是否开启多因素验证"""
  mfaEnabled: Boolean
  """多因素验证密钥"""
  mfaSecret: String
  """多因素验证状态"""
  mfaStatus: UserLoginProfileMfaStatus
  userID: ID
}
"""
CreateUserPasswordInput is used for create UserPassword object.
Input was generated by ent.
"""
input CreateUserPasswordInput {
  """场景: login 普通登陆"""
  scene: UserPasswordScene
  """密码"""
  password: String
  status: UserPasswordStatus
  memo: String
  userID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/woocoos/adminx/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument."""
  ASC
  """Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument."""
  DESC
}
type Organization implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  """管理账户ID"""
  ownerID: ID
  """父级ID,0为根组织."""
  parentID: ID!
  """默认域名"""
  domain: String
  """系统代码"""
  code: String
  """组织名称"""
  name: String!
  """简介"""
  profile: String
  """状态"""
  status: OrganizationStatus
  """路径编码"""
  path: String
  displaySort: Int
  """国家或地区2字码"""
  countryCode: String
  """时区"""
  timezone: String
  parent: Organization!
  children: [Organization!]
}
"""A connection to a list of items."""
type OrganizationConnection {
  """A list of edges."""
  edges: [OrganizationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type OrganizationEdge {
  """The item at the end of the edge."""
  node: Organization
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Organization connections"""
input OrganizationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Organizations."""
  field: OrganizationOrderField!
}
"""Properties by which Organization connections can be ordered."""
enum OrganizationOrderField {
  createdAt
}
"""OrganizationStatus is enum for the field status"""
enum OrganizationStatus @goModel(model: "github.com/woocoos/adminx/ent/organization.Status") {
  active
  inactive
}
"""Ordering options for OrganizationUser connections"""
input OrganizationUserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order OrganizationUsers."""
  field: OrganizationUserOrderField!
}
"""Properties by which OrganizationUser connections can be ordered."""
enum OrganizationUserOrderField {
  createdAt
}
"""
OrganizationUserWhereInput is used for filtering OrganizationUser objects.
Input was generated by ent.
"""
input OrganizationUserWhereInput {
  not: OrganizationUserWhereInput
  and: [OrganizationUserWhereInput!]
  or: [OrganizationUserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """display_name field predicates"""
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
}
"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
  not: OrganizationWhereInput
  and: [OrganizationWhereInput!]
  or: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """owner_id field predicates"""
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  """parent_id field predicates"""
  parentID: ID
  parentIDNEQ: ID
  parentIDIn: [ID!]
  parentIDNotIn: [ID!]
  """domain field predicates"""
  domain: String
  domainNEQ: String
  domainIn: [String!]
  domainNotIn: [String!]
  domainGT: String
  domainGTE: String
  domainLT: String
  domainLTE: String
  domainContains: String
  domainHasPrefix: String
  domainHasSuffix: String
  domainIsNil: Boolean
  domainNotNil: Boolean
  domainEqualFold: String
  domainContainsFold: String
  """code field predicates"""
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIsNil: Boolean
  codeNotNil: Boolean
  codeEqualFold: String
  codeContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """status field predicates"""
  status: OrganizationStatus
  statusNEQ: OrganizationStatus
  statusIn: [OrganizationStatus!]
  statusNotIn: [OrganizationStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """path field predicates"""
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathIsNil: Boolean
  pathNotNil: Boolean
  pathEqualFold: String
  pathContainsFold: String
  """country_code field predicates"""
  countryCode: String
  countryCodeNEQ: String
  countryCodeIn: [String!]
  countryCodeNotIn: [String!]
  countryCodeGT: String
  countryCodeGTE: String
  countryCodeLT: String
  countryCodeLTE: String
  countryCodeContains: String
  countryCodeHasPrefix: String
  countryCodeHasSuffix: String
  countryCodeIsNil: Boolean
  countryCodeNotNil: Boolean
  countryCodeEqualFold: String
  countryCodeContainsFold: String
  """timezone field predicates"""
  timezone: String
  timezoneNEQ: String
  timezoneIn: [String!]
  timezoneNotIn: [String!]
  timezoneGT: String
  timezoneGTE: String
  timezoneLT: String
  timezoneLTE: String
  timezoneContains: String
  timezoneHasPrefix: String
  timezoneHasSuffix: String
  timezoneIsNil: Boolean
  timezoneNotNil: Boolean
  timezoneEqualFold: String
  timezoneContainsFold: String
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [OrganizationWhereInput!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [OrganizationWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: GID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [GID!]!
  ): [Node]!
  apps(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Apps returned from the connection."""
    orderBy: AppOrder

    """Filtering options for Apps returned from the connection."""
    where: AppWhereInput
  ): AppConnection!
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Organizations returned from the connection."""
    orderBy: OrganizationOrder

    """Filtering options for Organizations returned from the connection."""
    where: OrganizationWhereInput
  ): OrganizationConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateAppInput is used for update App object.
Input was generated by ent.
"""
input UpdateAppInput {
  """应用名称"""
  name: String
  clearName: Boolean
  """应用类型"""
  kind: AppKind
  """回调地址"""
  redirectURI: String
  clearRedirectURI: Boolean
  """应用ID"""
  appKey: String
  clearAppKey: Boolean
  """应用密钥"""
  appSecret: String
  clearAppSecret: Boolean
  """权限范围"""
  scopes: String
  clearScopes: Boolean
  """token有效期"""
  tokenValidity: Int
  clearTokenValidity: Boolean
  """refresh_token有效期"""
  refreshTokenValidity: Int
  clearRefreshTokenValidity: Boolean
  """图标"""
  logo: String
  clearLogo: Boolean
  """备注"""
  comments: String
  clearComments: Boolean
  """状态"""
  status: AppStatus
  clearStatus: Boolean
  addMenuIDs: [ID!]
  removeMenuIDs: [ID!]
  clearMenus: Boolean
  addPermissionIDs: [ID!]
  removePermissionIDs: [ID!]
  clearPermissions: Boolean
}
"""
UpdateOrganizationInput is used for update Organization object.
Input was generated by ent.
"""
input UpdateOrganizationInput {
  """默认域名"""
  domain: String
  clearDomain: Boolean
  """组织名称"""
  name: String
  """简介"""
  profile: String
  clearProfile: Boolean
  """状态"""
  status: OrganizationStatus
  clearStatus: Boolean
  """国家或地区2字码"""
  countryCode: String
  clearCountryCode: Boolean
  """时区"""
  timezone: String
  clearTimezone: Boolean
  parentID: ID
  clearParent: Boolean
  ownerID: ID
  clearOwner: Boolean
}
"""
UpdateUserIdentityInput is used for update UserIdentity object.
Input was generated by ent.
"""
input UpdateUserIdentityInput {
  """身份标识类型 手机、邮箱、用户名、微信、qq"""
  kind: UserIdentityKind
  """用户名、邮箱、手机、unionid、qq"""
  code: String
  clearCode: Boolean
  """扩展标识码,比如微信的openID"""
  codeExtend: String
  clearCodeExtend: Boolean
  """状态,部分登陆方式需要验证通过才可启用"""
  status: UserIdentityStatus
  clearStatus: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """登陆名称"""
  principalName: String
  """显示名"""
  displayName: String
  """备注"""
  comments: String
  clearComments: Boolean
  addIdentityIDs: [ID!]
  removeIdentityIDs: [ID!]
  clearIdentities: Boolean
  loginProfileID: ID
  clearLoginProfile: Boolean
  addPasswordIDs: [ID!]
  removePasswordIDs: [ID!]
  clearPasswords: Boolean
  addDeviceIDs: [ID!]
  removeDeviceIDs: [ID!]
  clearDevices: Boolean
}
"""
UpdateUserLoginProfileInput is used for update UserLoginProfile object.
Input was generated by ent.
"""
input UpdateUserLoginProfileInput {
  """是否允许使用密码登陆控制台"""
  canLogin: Boolean
  clearCanLogin: Boolean
  """设置密码方式"""
  setKind: UserLoginProfileSetKind
  """下次登陆时需要重置密码"""
  passwordReset: Boolean
  clearPasswordReset: Boolean
  """是否开启设备认证"""
  verifyDevice: Boolean
  """是否开启多因素验证"""
  mfaEnabled: Boolean
  clearMfaEnabled: Boolean
  """多因素验证密钥"""
  mfaSecret: String
  clearMfaSecret: Boolean
  """多因素验证状态"""
  mfaStatus: UserLoginProfileMfaStatus
  clearMfaStatus: Boolean
}
"""
UpdateUserPasswordInput is used for update UserPassword object.
Input was generated by ent.
"""
input UpdateUserPasswordInput {
  """场景: login 普通登陆"""
  scene: UserPasswordScene
  clearScene: Boolean
  """密码"""
  password: String
  clearPassword: Boolean
  status: UserPasswordStatus
  clearStatus: Boolean
  memo: String
  clearMemo: Boolean
}
type User implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  """登陆名称"""
  principalName: String!
  """显示名"""
  displayName: String!
  """用户类型"""
  userType: UserUserType!
  """创建类型,邀请，注册,手工创建"""
  creationType: UserCreationType!
  """注册时IP"""
  registerIP: String!
  """状态"""
  status: UserStatus
  """备注"""
  comments: String
  identities: [UserIdentity!]
  loginProfile: UserLoginProfile
  passwords: [UserPassword!]
  devices: [UserDevice!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""UserCreationType is enum for the field creation_type"""
enum UserCreationType @goModel(model: "github.com/woocoos/adminx/ent/user.CreationType") {
  invitation
  register
  manual
}
type UserDevice implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  userID: ID
  """设备唯一ID"""
  deviceUID: String!
  deviceName: String
  systemName: String
  systemVersion: String
  appVersion: String
  deviceModel: String
  """状态,可用或不可用及其他待确认状态"""
  status: UserDeviceStatus
  """备注"""
  comments: String
  user: User
}
"""Ordering options for UserDevice connections"""
input UserDeviceOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserDevices."""
  field: UserDeviceOrderField!
}
"""Properties by which UserDevice connections can be ordered."""
enum UserDeviceOrderField {
  createdAt
}
"""UserDeviceStatus is enum for the field status"""
enum UserDeviceStatus @goModel(model: "github.com/woocoos/adminx/ent/userdevice.Status") {
  active
  inactive
}
"""
UserDeviceWhereInput is used for filtering UserDevice objects.
Input was generated by ent.
"""
input UserDeviceWhereInput {
  not: UserDeviceWhereInput
  and: [UserDeviceWhereInput!]
  or: [UserDeviceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  """device_uid field predicates"""
  deviceUID: String
  deviceUIDNEQ: String
  deviceUIDIn: [String!]
  deviceUIDNotIn: [String!]
  deviceUIDGT: String
  deviceUIDGTE: String
  deviceUIDLT: String
  deviceUIDLTE: String
  deviceUIDContains: String
  deviceUIDHasPrefix: String
  deviceUIDHasSuffix: String
  deviceUIDEqualFold: String
  deviceUIDContainsFold: String
  """device_name field predicates"""
  deviceName: String
  deviceNameNEQ: String
  deviceNameIn: [String!]
  deviceNameNotIn: [String!]
  deviceNameGT: String
  deviceNameGTE: String
  deviceNameLT: String
  deviceNameLTE: String
  deviceNameContains: String
  deviceNameHasPrefix: String
  deviceNameHasSuffix: String
  deviceNameIsNil: Boolean
  deviceNameNotNil: Boolean
  deviceNameEqualFold: String
  deviceNameContainsFold: String
  """system_name field predicates"""
  systemName: String
  systemNameNEQ: String
  systemNameIn: [String!]
  systemNameNotIn: [String!]
  systemNameGT: String
  systemNameGTE: String
  systemNameLT: String
  systemNameLTE: String
  systemNameContains: String
  systemNameHasPrefix: String
  systemNameHasSuffix: String
  systemNameIsNil: Boolean
  systemNameNotNil: Boolean
  systemNameEqualFold: String
  systemNameContainsFold: String
  """system_version field predicates"""
  systemVersion: String
  systemVersionNEQ: String
  systemVersionIn: [String!]
  systemVersionNotIn: [String!]
  systemVersionGT: String
  systemVersionGTE: String
  systemVersionLT: String
  systemVersionLTE: String
  systemVersionContains: String
  systemVersionHasPrefix: String
  systemVersionHasSuffix: String
  systemVersionIsNil: Boolean
  systemVersionNotNil: Boolean
  systemVersionEqualFold: String
  systemVersionContainsFold: String
  """app_version field predicates"""
  appVersion: String
  appVersionNEQ: String
  appVersionIn: [String!]
  appVersionNotIn: [String!]
  appVersionGT: String
  appVersionGTE: String
  appVersionLT: String
  appVersionLTE: String
  appVersionContains: String
  appVersionHasPrefix: String
  appVersionHasSuffix: String
  appVersionIsNil: Boolean
  appVersionNotNil: Boolean
  appVersionEqualFold: String
  appVersionContainsFold: String
  """device_model field predicates"""
  deviceModel: String
  deviceModelNEQ: String
  deviceModelIn: [String!]
  deviceModelNotIn: [String!]
  deviceModelGT: String
  deviceModelGTE: String
  deviceModelLT: String
  deviceModelLTE: String
  deviceModelContains: String
  deviceModelHasPrefix: String
  deviceModelHasSuffix: String
  deviceModelIsNil: Boolean
  deviceModelNotNil: Boolean
  deviceModelEqualFold: String
  deviceModelContainsFold: String
  """status field predicates"""
  status: UserDeviceStatus
  statusNEQ: UserDeviceStatus
  statusIn: [UserDeviceStatus!]
  statusNotIn: [UserDeviceStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type UserIdentity implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  userID: ID
  """身份标识类型 手机、邮箱、用户名、微信、qq"""
  kind: UserIdentityKind!
  """用户名、邮箱、手机、unionid、qq"""
  code: String
  """扩展标识码,比如微信的openID"""
  codeExtend: String
  """状态,部分登陆方式需要验证通过才可启用"""
  status: UserIdentityStatus
  user: User
}
"""UserIdentityKind is enum for the field kind"""
enum UserIdentityKind @goModel(model: "github.com/woocoos/adminx/ent/useridentity.Kind") {
  name
  email
  phone
  wechat
  qq
}
"""Ordering options for UserIdentity connections"""
input UserIdentityOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserIdentities."""
  field: UserIdentityOrderField!
}
"""Properties by which UserIdentity connections can be ordered."""
enum UserIdentityOrderField {
  createdAt
}
"""UserIdentityStatus is enum for the field status"""
enum UserIdentityStatus @goModel(model: "github.com/woocoos/adminx/ent/useridentity.Status") {
  verify
  active
  inactive
}
"""
UserIdentityWhereInput is used for filtering UserIdentity objects.
Input was generated by ent.
"""
input UserIdentityWhereInput {
  not: UserIdentityWhereInput
  and: [UserIdentityWhereInput!]
  or: [UserIdentityWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  """kind field predicates"""
  kind: UserIdentityKind
  kindNEQ: UserIdentityKind
  kindIn: [UserIdentityKind!]
  kindNotIn: [UserIdentityKind!]
  """code field predicates"""
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIsNil: Boolean
  codeNotNil: Boolean
  codeEqualFold: String
  codeContainsFold: String
  """code_extend field predicates"""
  codeExtend: String
  codeExtendNEQ: String
  codeExtendIn: [String!]
  codeExtendNotIn: [String!]
  codeExtendGT: String
  codeExtendGTE: String
  codeExtendLT: String
  codeExtendLTE: String
  codeExtendContains: String
  codeExtendHasPrefix: String
  codeExtendHasSuffix: String
  codeExtendIsNil: Boolean
  codeExtendNotNil: Boolean
  codeExtendEqualFold: String
  codeExtendContainsFold: String
  """status field predicates"""
  status: UserIdentityStatus
  statusNEQ: UserIdentityStatus
  statusIn: [UserIdentityStatus!]
  statusNotIn: [UserIdentityStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type UserLoginProfile implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  userID: ID
  lastLoginIP: String
  """最后登陆时间"""
  lastLoginAt: Time
  """是否允许使用密码登陆控制台"""
  canLogin: Boolean
  """设置密码方式"""
  setKind: UserLoginProfileSetKind!
  """下次登陆时需要重置密码"""
  passwordReset: Boolean
  """是否开启设备认证"""
  verifyDevice: Boolean!
  """是否开启多因素验证"""
  mfaEnabled: Boolean
  """多因素验证状态"""
  mfaStatus: UserLoginProfileMfaStatus
  user: User
}
"""UserLoginProfileMfaStatus is enum for the field mfa_status"""
enum UserLoginProfileMfaStatus @goModel(model: "github.com/woocoos/adminx/ent/userloginprofile.MfaStatus") {
  enable
  inactive
}
"""Ordering options for UserLoginProfile connections"""
input UserLoginProfileOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserLoginProfiles."""
  field: UserLoginProfileOrderField!
}
"""Properties by which UserLoginProfile connections can be ordered."""
enum UserLoginProfileOrderField {
  createdAt
}
"""UserLoginProfileSetKind is enum for the field set_kind"""
enum UserLoginProfileSetKind @goModel(model: "github.com/woocoos/adminx/ent/userloginprofile.SetKind") {
  keep
  customer
  auto
}
"""
UserLoginProfileWhereInput is used for filtering UserLoginProfile objects.
Input was generated by ent.
"""
input UserLoginProfileWhereInput {
  not: UserLoginProfileWhereInput
  and: [UserLoginProfileWhereInput!]
  or: [UserLoginProfileWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  """can_login field predicates"""
  canLogin: Boolean
  canLoginNEQ: Boolean
  canLoginIsNil: Boolean
  canLoginNotNil: Boolean
  """set_kind field predicates"""
  setKind: UserLoginProfileSetKind
  setKindNEQ: UserLoginProfileSetKind
  setKindIn: [UserLoginProfileSetKind!]
  setKindNotIn: [UserLoginProfileSetKind!]
  """password_reset field predicates"""
  passwordReset: Boolean
  passwordResetNEQ: Boolean
  passwordResetIsNil: Boolean
  passwordResetNotNil: Boolean
  """verify_device field predicates"""
  verifyDevice: Boolean
  verifyDeviceNEQ: Boolean
  """mfa_enabled field predicates"""
  mfaEnabled: Boolean
  mfaEnabledNEQ: Boolean
  mfaEnabledIsNil: Boolean
  mfaEnabledNotNil: Boolean
  """mfa_status field predicates"""
  mfaStatus: UserLoginProfileMfaStatus
  mfaStatusNEQ: UserLoginProfileMfaStatus
  mfaStatusIn: [UserLoginProfileMfaStatus!]
  mfaStatusNotIn: [UserLoginProfileMfaStatus!]
  mfaStatusIsNil: Boolean
  mfaStatusNotNil: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  createdAt
}
type UserPassword implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  userID: ID
  """场景: login 普通登陆"""
  scene: UserPasswordScene
  status: UserPasswordStatus
  memo: String
  user: User
}
"""Ordering options for UserPassword connections"""
input UserPasswordOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserPasswords."""
  field: UserPasswordOrderField!
}
"""Properties by which UserPassword connections can be ordered."""
enum UserPasswordOrderField {
  createdAt
}
"""UserPasswordScene is enum for the field scene"""
enum UserPasswordScene @goModel(model: "github.com/woocoos/adminx/ent/userpassword.Scene") {
  login
}
"""UserPasswordStatus is enum for the field status"""
enum UserPasswordStatus @goModel(model: "github.com/woocoos/adminx/ent/userpassword.Status") {
  inactive
}
"""
UserPasswordWhereInput is used for filtering UserPassword objects.
Input was generated by ent.
"""
input UserPasswordWhereInput {
  not: UserPasswordWhereInput
  and: [UserPasswordWhereInput!]
  or: [UserPasswordWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  """scene field predicates"""
  scene: UserPasswordScene
  sceneNEQ: UserPasswordScene
  sceneIn: [UserPasswordScene!]
  sceneNotIn: [UserPasswordScene!]
  sceneIsNil: Boolean
  sceneNotNil: Boolean
  """status field predicates"""
  status: UserPasswordStatus
  statusNEQ: UserPasswordStatus
  statusIn: [UserPasswordStatus!]
  statusNotIn: [UserPasswordStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""UserStatus is enum for the field status"""
enum UserStatus @goModel(model: "github.com/woocoos/adminx/ent/user.Status") {
  processing
  active
  inactive
}
"""UserUserType is enum for the field user_type"""
enum UserUserType @goModel(model: "github.com/woocoos/adminx/ent/user.UserType") {
  account
  member
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """principal_name field predicates"""
  principalName: String
  principalNameNEQ: String
  principalNameIn: [String!]
  principalNameNotIn: [String!]
  principalNameGT: String
  principalNameGTE: String
  principalNameLT: String
  principalNameLTE: String
  principalNameContains: String
  principalNameHasPrefix: String
  principalNameHasSuffix: String
  principalNameEqualFold: String
  principalNameContainsFold: String
  """display_name field predicates"""
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """creation_type field predicates"""
  creationType: UserCreationType
  creationTypeNEQ: UserCreationType
  creationTypeIn: [UserCreationType!]
  creationTypeNotIn: [UserCreationType!]
  """register_ip field predicates"""
  registerIP: String
  registerIPNEQ: String
  registerIPIn: [String!]
  registerIPNotIn: [String!]
  registerIPGT: String
  registerIPGTE: String
  registerIPLT: String
  registerIPLTE: String
  registerIPContains: String
  registerIPHasPrefix: String
  registerIPHasSuffix: String
  registerIPEqualFold: String
  registerIPContainsFold: String
  """status field predicates"""
  status: UserStatus
  statusNEQ: UserStatus
  statusIn: [UserStatus!]
  statusNotIn: [UserStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """identities edge predicates"""
  hasIdentities: Boolean
  hasIdentitiesWith: [UserIdentityWhereInput!]
  """login_profile edge predicates"""
  hasLoginProfile: Boolean
  hasLoginProfileWith: [UserLoginProfileWhereInput!]
  """passwords edge predicates"""
  hasPasswords: Boolean
  hasPasswordsWith: [UserPasswordWhereInput!]
  """devices edge predicates"""
  hasDevices: Boolean
  hasDevicesWith: [UserDeviceWhereInput!]
}
`, BuiltIn: false},
	{Name: "../doc/types.graphql", Input: `scalar GID

`, BuiltIn: false},
	{Name: "../doc/query.graphql", Input: `extend type Query {
    """获取全局ID,开发用途"""
    globalID(type: String!, id: ID!): GID
}`, BuiltIn: false},
	{Name: "../doc/mutation.graphql", Input: `type Mutation {
    """启用目录管理,返回根节点组织信息"""
    enableDirectory(input: EnableDirectoryInput!):Organization
    """创建组织目录"""
    createOrganization(input: CreateOrganizationInput!): Organization
    """更新组织目录"""
    updateOrganization(id:ID!,input: UpdateOrganizationInput!): Organization
    """删除组织目录"""
    deleteOrganization(id:ID!): Boolean!
    """创建组织成员(管理账户)"""
    createOrganizationAccount(input: CreateOrganizationAccountInput!): User
    """创建组织用户"""
    createOrganizationUser(id:ID!,input: CreateUserInput!): User
    """更新用户"""
    updateUser(id:ID!,input: UpdateUserInput!): User
    """创建应用"""
    createApp(input: CreateAppInput!): App
    """更新应用"""
    updateApp(id:ID!,input: UpdateAppInput!): App
    """删除应用"""
    deleteApp(id:ID!): Boolean!
}

input EnableDirectoryInput {
    """域名"""
    domain: String!
    name: String!
}

input CreateOrganizationAccountInput {
    """账号名称,组织内不可重复"""
    displayName: String!
    """账号登录名(含默认域名)"""
    principalName: String!
    """邮箱"""
    email: String!
    """所属组织ID"""
    orgId: ID!
}

extend input CreateUserInput {
    id: ID
    loginProfile: CreateUserLoginProfileInput
    """如指定密码则填入,否则由系统自动生成密码"""
    password: CreateUserPasswordInput
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
